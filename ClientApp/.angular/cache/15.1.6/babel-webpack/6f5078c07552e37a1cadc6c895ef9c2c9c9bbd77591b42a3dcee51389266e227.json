{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction FetchParcelDataComponent_div_0_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\")(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"span\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Item ID: \", item_r3.index, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Item Name: \", item_r3.name, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Item Cost: \", item_r3.weight, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Item Weight: \", item_r3.cost, \"\");\n  }\n}\nfunction FetchParcelDataComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\", 1);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, FetchParcelDataComponent_div_0_li_4_Template, 9, 4, \"li\", 0);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const parcel_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Sample Parcel Weight: \", parcel_r1.sampleParcelWeight, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", parcel_r1.items);\n  }\n}\nexport class FetchParcelDataComponent {\n  constructor(http) {\n    this.http = http;\n    this.parcels = [];\n    this.fileUrl = 'https://gist.githubusercontent.com/Lynne88git/552c061f4ebe867b70f6bc2376653b02/raw/876ca05861ce3bed421e0970b24563dfdfeb7ca5/input.txt';\n  }\n  ngOnInit() {\n    this.fetchParcels();\n  }\n  fetchParcels() {\n    this.http.get(this.fileUrl, {\n      responseType: 'text'\n    }).subscribe(data => {\n      this.parseParcels(data);\n    }, error => {\n      console.error(error);\n    });\n  }\n  parseParcels(data) {\n    for (const [idStr, itemsStr] of Object.entries(data)) {\n      const id = parseInt(idStr);\n      const items = itemsStr.trim().split(/\\)\\s*\\(/) // Split the string at each occurrence of ')' followed by '('\n      .map(item => {\n        const [indexStr, name, weightStr, costStr] = item.replace(/[()€]/g, '') // Remove parentheses and euro symbol\n        .split(',').map(value => value.trim());\n        const index = parseInt(indexStr);\n        const weight = parseFloat(weightStr);\n        const cost = parseFloat(costStr);\n        return {\n          index: index.toString(),\n          name: name,\n          weight: weight,\n          cost: cost\n        };\n      });\n      const parcel = {\n        id: id,\n        sampleParcelWeight: 0,\n        items: items\n      };\n      console.log(parcel);\n      // Add the parcel to your parcels array or perform any other desired operations\n    }\n  }\n}\n\nFetchParcelDataComponent.ɵfac = function FetchParcelDataComponent_Factory(t) {\n  return new (t || FetchParcelDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nFetchParcelDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchParcelDataComponent,\n  selectors: [[\"app-fetch-parcel-data\"]],\n  decls: 3,\n  vars: 1,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [1, \"text-white\"]],\n  template: function FetchParcelDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, FetchParcelDataComponent_div_0_Template, 5, 2, \"div\", 0);\n      i0.ɵɵelementStart(1, \"h2\", 1);\n      i0.ɵɵtext(2, \"Hello\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.parcels);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;IAGQA,0BAAsC;IAC5BA,YAAyB;IAAAA,iBAAO;IACtCA,4BAAM;IAAAA,YAA0B;IAAAA,iBAAO;IACvCA,4BAAM;IAAAA,YAA4B;IAAAA,iBAAO;IACzCA,4BAAM;IAAAA,YAA4B;IAAAA,iBAAO;;;;IAHnCA,eAAyB;IAAzBA,qDAAyB;IACzBA,eAA0B;IAA1BA,sDAA0B;IAC1BA,eAA4B;IAA5BA,wDAA4B;IAC5BA,eAA4B;IAA5BA,wDAA4B;;;;;IAP9CA,2BAAoC;IACTA,YAAqD;IAAAA,iBAAK;IACjFA,0BAAI;IACAA,6EAKK;IACTA,iBAAK;;;;IARkBA,eAAqD;IAArDA,iFAAqD;IAEnDA,eAAe;IAAfA,yCAAe;;;ACO5C,OAAM,MAAOC,wBAAwB;EAInCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHjB,YAAO,GAAa,EAAE;IACrB,YAAO,GAAG,uIAAuI;EAElH;EAEvCC,QAAQ;IACN,IAAI,CAACC,YAAY,EAAE;EACrB;EAEQA,YAAY;IAClB,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACC,OAAO,EAAE;MAAEC,YAAY,EAAE;IAAgB,CAAE,CAAC,CAACC,SAAS,CAC9EC,IAAY,IAAI;MACf,IAAI,CAACC,YAAY,CAACD,IAAI,CAAC;IACzB,CAAC,EACAE,KAAU,IAAI;MACbC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CACF;EACH;EAEQD,YAAY,CAACD,IAAY;IAC/B,KAAK,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACP,IAAI,CAAC,EAAE;MACpD,MAAMQ,EAAE,GAAGC,QAAQ,CAACL,KAAK,CAAC;MAC1B,MAAMM,KAAK,GAAGL,QAAQ,CACnBM,IAAI,EAAE,CACNC,KAAK,CAAC,SAAS,CAAC,CAAC;MAAA,CACjBC,GAAG,CAAEC,IAAY,IAAI;QACpB,MAAM,CAACC,QAAQ,EAAEC,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAC,GAAGJ,IAAI,CAC9CK,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAAA,CACtBP,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAAEO,KAAa,IAAKA,KAAK,CAACT,IAAI,EAAE,CAAC;QACvC,MAAMU,KAAK,GAAGZ,QAAQ,CAACM,QAAQ,CAAC;QAChC,MAAMO,MAAM,GAAGC,UAAU,CAACN,SAAS,CAAC;QACpC,MAAMO,IAAI,GAAGD,UAAU,CAACL,OAAO,CAAC;QAChC,OAAO;UACLG,KAAK,EAAEA,KAAK,CAACI,QAAQ,EAAE;UACvBT,IAAI,EAAEA,IAAI;UACVM,MAAM,EAAEA,MAAM;UACdE,IAAI,EAAEA;SACC;MACX,CAAC,CAAC;MAEJ,MAAME,MAAM,GAAW;QACrBlB,EAAE,EAAEA,EAAE;QACNmB,kBAAkB,EAAE,CAAC;QACrBjB,KAAK,EAAEA;OACR;MAEDP,OAAO,CAACyB,GAAG,CAACF,MAAM,CAAC;MACnB;;EAEJ;;;AApDWnC,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;QAAxBA,wBAAwB;EAAAsC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDVrC3C,yEAUM;MACNA,6BAAuB;MAAAA,qBAAK;MAAAA,iBAAK;;;MAXTA,qCAAU","names":["i0","FetchParcelDataComponent","constructor","http","ngOnInit","fetchParcels","get","fileUrl","responseType","subscribe","data","parseParcels","error","console","idStr","itemsStr","Object","entries","id","parseInt","items","trim","split","map","item","indexStr","name","weightStr","costStr","replace","value","index","weight","parseFloat","cost","toString","parcel","sampleParcelWeight","log","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\fetch-parcel-data\\fetch-parcel-data.component.html","C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\fetch-parcel-data\\fetch-parcel-data.component.ts"],"sourcesContent":["<div *ngFor=\"let parcel of parcels\">\n    <h3 class=\"text-white\">Sample Parcel Weight: {{ parcel.sampleParcelWeight }}</h3>\n    <ul>\n        <li *ngFor=\"let item of parcel.items\">\n            <span>Item ID: {{ item.index }}</span>\n            <span>Item Name: {{ item.name }}</span>\n            <span>Item Cost: {{ item.weight }}</span>\n            <span>Item Weight: {{ item.cost }}</span>\n        </li>\n    </ul>\n</div>\n<h2 class=\"text-white\">Hello</h2>\n","import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Parcel } from '../interfaces/parcel.interface';\nimport { Item } from '../interfaces/item.interface'\n\n@Component({\n  selector: 'app-fetch-parcel-data',\n  templateUrl: './fetch-parcel-data.component.html',\n  styleUrls: ['./fetch-parcel-data.component.css']\n})\nexport class FetchParcelDataComponent {\n  public parcels: Parcel[] = [];\n  private fileUrl = 'https://gist.githubusercontent.com/Lynne88git/552c061f4ebe867b70f6bc2376653b02/raw/876ca05861ce3bed421e0970b24563dfdfeb7ca5/input.txt';\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {\r\n    this.fetchParcels();\r\n  }\r\n\r\n  private fetchParcels(): void {\r\n    this.http.get<object>(this.fileUrl, { responseType: 'text' as 'json' }).subscribe(\r\n      (data: object) => {\r\n        this.parseParcels(data);\r\n      },\r\n      (error: any) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  private parseParcels(data: object): void {\r\n    for (const [idStr, itemsStr] of Object.entries(data)) {\r\n      const id = parseInt(idStr);\r\n      const items = itemsStr\r\n        .trim()\r\n        .split(/\\)\\s*\\(/) // Split the string at each occurrence of ')' followed by '('\r\n        .map((item: string) => {\r\n          const [indexStr, name, weightStr, costStr] = item\r\n            .replace(/[()€]/g, '') // Remove parentheses and euro symbol\r\n            .split(',')\r\n            .map((value: string) => value.trim());\r\n          const index = parseInt(indexStr);\r\n          const weight = parseFloat(weightStr);\r\n          const cost = parseFloat(costStr);\r\n          return {\r\n            index: index.toString(),\r\n            name: name,\r\n            weight: weight,\r\n            cost: cost\r\n          } as Item;\r\n        });\r\n\r\n      const parcel: Parcel = {\r\n        id: id,\r\n        sampleParcelWeight: 0, // Set the sampleParcelWeight value as needed\r\n        items: items\r\n      };\r\n\r\n      console.log(parcel);\r\n      // Add the parcel to your parcels array or perform any other desired operations\r\n    }\r\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}