{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/common\";\nfunction PackingFormComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"div\", 8)(2, \"div\", 9)(3, \"label\", 10);\n    i0.ɵɵtext(4, \"Index:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"input\", 11);\n    i0.ɵɵlistener(\"change\", function PackingFormComponent_div_6_Template_input_change_5_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onItemSelection($event));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 9)(7, \"label\", 10);\n    i0.ɵɵtext(8, \"Weight:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"input\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 9)(11, \"label\", 10);\n    i0.ɵɵtext(12, \"Cost:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"input\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"div\", 9)(15, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function PackingFormComponent_div_6_Template_button_click_15_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const i_r2 = restoredCtx.index;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.removeItem(i_r2));\n    });\n    i0.ɵɵtext(16, \"Remove\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    let tmp_5_0;\n    let tmp_8_0;\n    i0.ɵɵproperty(\"formGroupName\", i_r2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"index\", i_r2, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"index\", i_r2, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"weight\", i_r2, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"weight\", i_r2, \"\");\n    i0.ɵɵproperty(\"disabled\", ((tmp_5_0 = item_r1.get(\"index\")) == null ? null : tmp_5_0.value) !== \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"cost\", i_r2, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"cost\", i_r2, \"\");\n    i0.ɵɵproperty(\"disabled\", ((tmp_8_0 = item_r1.get(\"index\")) == null ? null : tmp_8_0.value) !== \"\");\n  }\n}\nexport class PackingFormComponent {\n  constructor(fb, http) {\n    this.fb = fb;\n    this.http = http;\n    this.packingForm = new FormGroup({});\n    this.sampleWeights = [];\n    this.allItems = [];\n    this.availableItems = [];\n  }\n  ngOnInit() {\n    this.initForm();\n    this.loadSampleWeights();\n    this.loadAvailableItems();\n    const filePath = 'assets/input.txt';\n    this.http.get(filePath, {\n      responseType: 'text'\n    }).subscribe(response => {\n      this.allItems = this.extractItems(response); // Load all items\n    }, error => {\n      console.error(error);\n    });\n  }\n  initForm() {\n    this.packingForm = this.fb.group({\n      weightLimit: ['', [Validators.required, Validators.max(100)]],\n      items: this.fb.array([])\n    });\n    this.packingForm.get('weightLimit')?.valueChanges.subscribe(() => {\n      this.filterItemsByWeight();\n    });\n  }\n  get items() {\n    return this.packingForm.get('items');\n  }\n  addItem(item) {\n    const weightLimit = this.packingForm.get('weightLimit')?.value;\n    if (weightLimit) {\n      const itemGroup = this.fb.group({\n        index: [item ? item.index : '', Validators.required],\n        weight: [item ? item.weight : '', Validators.required],\n        cost: [item ? item.cost : '', Validators.required]\n      });\n      this.items.push(itemGroup);\n    }\n  }\n  removeItem(index) {\n    this.items.removeAt(index);\n  }\n  submitForm() {\n    if (this.packingForm.valid) {\n      const formValue = this.packingForm.value;\n      console.log(formValue);\n    }\n  }\n  loadSampleWeights() {\n    const filePath = 'assets/input.txt';\n    this.http.get(filePath, {\n      responseType: 'text'\n    }).subscribe(response => {\n      const weights = this.extractWeights(response);\n      this.sampleWeights = weights; // Assign the sample weights from the API response\n      this.filterItemsByWeight(); // Filter items based on the selected weight\n    }, error => {\n      console.error(error);\n    });\n  }\n  extractWeights(data) {\n    const lines = data.split('\\n');\n    const weights = [];\n    for (const line of lines) {\n      const parts = line.split(':');\n      if (parts.length === 2) {\n        const weight = parseFloat(parts[0].trim());\n        if (!isNaN(weight)) {\n          weights.push(weight);\n        }\n      }\n    }\n    return weights;\n  }\n  loadAvailableItems() {\n    // Load the available items from API or any other source\n    // For demo purposes, let's use a static list\n    this.availableItems = [{\n      index: 0,\n      name: 'Item 1',\n      weight: 1.5,\n      cost: 10\n    }, {\n      index: 1,\n      name: 'Item 2',\n      weight: 2.0,\n      cost: 15\n    }, {\n      index: 2,\n      name: 'Item 3',\n      weight: 0.5,\n      cost: 5\n    }];\n  }\n  extractItems(data) {\n    const lines = data.split('\\n');\n    const items = [];\n    for (const line of lines) {\n      const colonIndex = line.indexOf(':');\n      if (colonIndex !== -1) {\n        const weight = parseFloat(line.substring(0, colonIndex).trim());\n        const itemData = line.substring(colonIndex + 1).split('(');\n        for (const item of itemData) {\n          const itemInfo = item.replace(/[\\)\\s]/g, '').split(',');\n          if (itemInfo.length === 3) {\n            const id = parseInt(itemInfo[0]);\n            const itemWeight = parseFloat(itemInfo[1]);\n            const cost = parseFloat(itemInfo[2].substring(1));\n            items.push({\n              id,\n              weight: itemWeight,\n              cost\n            });\n          }\n        }\n      }\n    }\n    return items;\n  }\n  onItemSelection(event) {\n    const selectedIndex = parseInt(event.target.value);\n    const selectedWeight = parseFloat(this.packingForm.get('weightLimit')?.value);\n    const selectedItems = this.availableItems.filter(item => item.weight <= selectedWeight);\n    const selectedItem = selectedItems.find(item => item.index === selectedIndex);\n    if (selectedItem) {\n      this.packingForm.get('weight')?.setValue(selectedItem.weight);\n      this.packingForm.get('cost')?.setValue(selectedItem.cost);\n    }\n  }\n  filterItemsByWeight() {\n    const selectedWeight = parseFloat(this.packingForm.get('weightLimit')?.value);\n    // Clear existing items\n    while (this.items.length !== 0) {\n      this.items.removeAt(0);\n    }\n    // Filter items based on selected weight\n    this.availableItems = this.allItems.filter(item => item.weight <= selectedWeight);\n    // Log available items for each sample parcel\n    this.sampleWeights.forEach((weight, index) => {\n      const itemsForParcel = this.loadAllItems(weight);\n      console.log(`Available items for sample parcel ${index + 1}:`, itemsForParcel);\n    });\n  }\n  loadAllItems(weight) {\n    const itemsForParcel = [];\n    let remainingWeight = weight;\n    // Iterate over available items\n    for (const item of this.availableItems) {\n      if (item.weight <= remainingWeight) {\n        itemsForParcel.push(item);\n        remainingWeight -= item.weight;\n      }\n    }\n    return itemsForParcel;\n  }\n}\nPackingFormComponent.ɵfac = function PackingFormComponent_Factory(t) {\n  return new (t || PackingFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient));\n};\nPackingFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PackingFormComponent,\n  selectors: [[\"app-packing-form\"]],\n  decls: 14,\n  vars: 2,\n  consts: [[3, \"formGroup\"], [\"for\", \"weightLimit\"], [\"type\", \"number\", \"id\", \"weightLimit\", \"formControlName\", \"weightLimit\", \"placeholder\", \"Weight Limit\", 1, \"form-control\"], [\"formArrayName\", \"items\"], [\"class\", \"item-row\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [1, \"mt-3\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"item-row\", 3, \"formGroupName\"], [1, \"form-row\"], [1, \"col\"], [3, \"for\"], [\"type\", \"number\", \"formControlName\", \"index\", \"placeholder\", \"Index\", 1, \"form-control\", 3, \"id\", \"change\"], [\"type\", \"number\", \"formControlName\", \"weight\", \"placeholder\", \"Weight\", 1, \"form-control\", 3, \"id\", \"disabled\"], [\"type\", \"number\", \"formControlName\", \"cost\", \"placeholder\", \"Cost\", 1, \"form-control\", 3, \"id\", \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"]],\n  template: function PackingFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"label\", 1);\n      i0.ɵɵtext(2, \"Weight Limit:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"input\", 2)(4, \"hr\");\n      i0.ɵɵelementStart(5, \"div\", 3);\n      i0.ɵɵtemplate(6, PackingFormComponent_div_6_Template, 17, 9, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 5)(8, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function PackingFormComponent_Template_button_click_8_listener() {\n        return ctx.addItem();\n      });\n      i0.ɵɵtext(9, \"Add Item\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(10, \"hr\");\n      i0.ɵɵelementStart(11, \"div\", 5)(12, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function PackingFormComponent_Template_button_click_12_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵtext(13, \"Submit\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.packingForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.items.controls);\n    }\n  },\n  dependencies: [i3.NgForOf, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName],\n  styles: [\".item-group[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.btn-danger[_ngcontent-%COMP%] {\\r\\n  margin-left: 10px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFja2luZy1mb3JtL3BhY2tpbmctZm9ybS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyIuaXRlbS1ncm91cCB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbn1cclxuXHJcbi5idG4tZGFuZ2VyIHtcclxuICBtYXJnaW4tbGVmdDogMTBweDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","Validators","i0","PackingFormComponent","constructor","fb","http","ngOnInit","initForm","loadSampleWeights","loadAvailableItems","filePath","get","responseType","subscribe","response","allItems","extractItems","error","console","packingForm","group","weightLimit","required","max","items","array","valueChanges","filterItemsByWeight","addItem","item","value","itemGroup","index","weight","cost","push","removeItem","removeAt","submitForm","valid","formValue","log","weights","extractWeights","sampleWeights","data","lines","split","line","parts","length","parseFloat","trim","isNaN","availableItems","name","colonIndex","indexOf","substring","itemData","itemInfo","replace","id","parseInt","itemWeight","onItemSelection","event","selectedIndex","target","selectedWeight","selectedItems","filter","selectedItem","find","setValue","forEach","itemsForParcel","loadAllItems","remainingWeight","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\packing-form\\packing-form.component.ts","C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\packing-form\\packing-form.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-packing-form',\r\n  templateUrl: './packing-form.component.html',\r\n  styleUrls: ['./packing-form.component.css']\r\n})\r\nexport class PackingFormComponent implements OnInit {\r\n  packingForm: FormGroup = new FormGroup({});\r\n  sampleWeights: number[] = [];\r\n  allItems: any[] = [];\r\n  availableItems: any[] = [];\r\n\r\n  constructor(private fb: FormBuilder, private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    this.loadSampleWeights();\r\n    this.loadAvailableItems();\r\n    const filePath = 'assets/input.txt';\r\n    this.http.get(filePath, { responseType: 'text' }).subscribe(\r\n      (response) => {\r\n        this.allItems = this.extractItems(response); // Load all items\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  initForm(): void {\r\n    this.packingForm = this.fb.group({\r\n      weightLimit: ['', [Validators.required, Validators.max(100)]],\r\n      items: this.fb.array([])\r\n    });\r\n\r\n    this.packingForm.get('weightLimit')?.valueChanges.subscribe(() => {\r\n      this.filterItemsByWeight();\r\n    });\r\n  }\r\n\r\n  get items(): FormArray {\r\n    return this.packingForm.get('items') as FormArray;\r\n  }\r\n\r\n  addItem(item?: any): void {\r\n    const weightLimit = this.packingForm.get('weightLimit')?.value;\r\n    if (weightLimit) {\r\n      const itemGroup = this.fb.group({\r\n        index: [item ? item.index : '', Validators.required],\r\n        weight: [item ? item.weight : '', Validators.required],\r\n        cost: [item ? item.cost : '', Validators.required]\r\n      });\r\n      this.items.push(itemGroup);\r\n    }\r\n  }\r\n\r\n  removeItem(index: number): void {\r\n    this.items.removeAt(index);\r\n  }\r\n\r\n  submitForm(): void {\r\n    if (this.packingForm.valid) {\r\n      const formValue = this.packingForm.value;\r\n      console.log(formValue);\r\n    }\r\n  }\r\n\r\n  loadSampleWeights(): void {\r\n    const filePath = 'assets/input.txt';\r\n    this.http.get(filePath, { responseType: 'text' }).subscribe(\r\n      (response) => {\r\n        const weights = this.extractWeights(response);\r\n        this.sampleWeights = weights; // Assign the sample weights from the API response\r\n        this.filterItemsByWeight(); // Filter items based on the selected weight\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  extractWeights(data: string): number[] {\r\n    const lines = data.split('\\n');\r\n    const weights: number[] = [];\r\n    for (const line of lines) {\r\n      const parts = line.split(':');\r\n      if (parts.length === 2) {\r\n        const weight = parseFloat(parts[0].trim());\r\n        if (!isNaN(weight)) {\r\n          weights.push(weight);\r\n        }\r\n      }\r\n    }\r\n    return weights;\r\n  }\r\n\r\n  loadAvailableItems(): void {\r\n    // Load the available items from API or any other source\r\n    // For demo purposes, let's use a static list\r\n    this.availableItems = [\r\n      { index: 0, name: 'Item 1', weight: 1.5, cost: 10 },\r\n      { index: 1, name: 'Item 2', weight: 2.0, cost: 15 },\r\n      { index: 2, name: 'Item 3', weight: 0.5, cost: 5 }\r\n    ];\r\n  }\r\n\r\n  extractItems(data: string): any[] {\r\n    const lines = data.split('\\n');\r\n    const items: any[] = [];\r\n\r\n    for (const line of lines) {\r\n      const colonIndex = line.indexOf(':');\r\n      if (colonIndex !== -1) {\r\n        const weight = parseFloat(line.substring(0, colonIndex).trim());\r\n        const itemData = line.substring(colonIndex + 1).split('(');\r\n\r\n        for (const item of itemData) {\r\n          const itemInfo = item.replace(/[\\)\\s]/g, '').split(',');\r\n          if (itemInfo.length === 3) {\r\n            const id = parseInt(itemInfo[0]);\r\n            const itemWeight = parseFloat(itemInfo[1]);\r\n            const cost = parseFloat(itemInfo[2].substring(1));\r\n\r\n            items.push({\r\n              id,\r\n              weight: itemWeight,\r\n              cost\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  onItemSelection(event: any): void {\r\n    const selectedIndex = parseInt(event.target.value);\r\n    const selectedWeight = parseFloat(this.packingForm.get('weightLimit')?.value);\r\n    const selectedItems = this.availableItems.filter(item => item.weight <= selectedWeight);\r\n    const selectedItem = selectedItems.find(item => item.index === selectedIndex);\r\n    if (selectedItem) {\r\n      this.packingForm.get('weight')?.setValue(selectedItem.weight);\r\n      this.packingForm.get('cost')?.setValue(selectedItem.cost);\r\n    }\r\n  }\r\n\r\n\r\n  filterItemsByWeight(): void {\r\n    const selectedWeight = parseFloat(this.packingForm.get('weightLimit')?.value);\r\n\r\n    // Clear existing items\r\n    while (this.items.length !== 0) {\r\n      this.items.removeAt(0);\r\n    }\r\n\r\n    // Filter items based on selected weight\r\n    this.availableItems = this.allItems.filter(item => item.weight <= selectedWeight);\r\n\r\n    // Log available items for each sample parcel\r\n    this.sampleWeights.forEach((weight, index) => {\r\n      const itemsForParcel = this.loadAllItems(weight);\r\n      console.log(`Available items for sample parcel ${index + 1}:`, itemsForParcel);\r\n    });\r\n  }\r\n\r\n  loadAllItems(weight: number): any[] {\r\n    const itemsForParcel: any[] = [];\r\n    let remainingWeight = weight;\r\n\r\n    // Iterate over available items\r\n    for (const item of this.availableItems) {\r\n      if (item.weight <= remainingWeight) {\r\n        itemsForParcel.push(item);\r\n        remainingWeight -= item.weight;\r\n      }\r\n    }\r\n\r\n    return itemsForParcel;\r\n  }\r\n}\r\n","<div [formGroup]=\"packingForm\">\r\n    <label for=\"weightLimit\">Weight Limit:</label>\r\n    <input type=\"number\" id=\"weightLimit\" formControlName=\"weightLimit\" class=\"form-control\" placeholder=\"Weight Limit\">\r\n\r\n    <hr>\r\n\r\n    <div formArrayName=\"items\">\r\n        <div *ngFor=\"let item of items.controls; let i = index\" [formGroupName]=\"i\" class=\"item-row\">\r\n            <div class=\"form-row\">\r\n                <div class=\"col\">\r\n                    <label for=\"index{{i}}\">Index:</label>\r\n                    <input type=\"number\" id=\"index{{i}}\" formControlName=\"index\" class=\"form-control\" placeholder=\"Index\" (change)=\"onItemSelection($event)\">\r\n                </div>\r\n                <div class=\"col\">\r\n                    <label for=\"weight{{i}}\">Weight:</label>\r\n                    <input type=\"number\" id=\"weight{{i}}\" formControlName=\"weight\" class=\"form-control\" placeholder=\"Weight\" [disabled]=\"item.get('index')?.value !== ''\">\r\n                </div>\r\n                <div class=\"col\">\r\n                    <label for=\"cost{{i}}\">Cost:</label>\r\n                    <input type=\"number\" id=\"cost{{i}}\" formControlName=\"cost\" class=\"form-control\" placeholder=\"Cost\" [disabled]=\"item.get('index')?.value !== ''\">\r\n                </div>\r\n                <div class=\"col\">\r\n                    <button type=\"button\" class=\"btn btn-danger\" (click)=\"removeItem(i)\">Remove</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"mt-3\">\r\n        <button type=\"button\" class=\"btn btn-primary\" (click)=\"addItem()\">Add Item</button>\r\n    </div>\r\n\r\n    <hr>\r\n\r\n    <div class=\"mt-3\">\r\n        <button type=\"button\" class=\"btn btn-primary\" (click)=\"submitForm()\">Submit</button>\r\n    </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}