{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ParcelDataService {\n  constructor(http) {\n    this.http = http;\n    this.fileUrl = 'https://gist.githubusercontent.com/Lynne88git/552c061f4ebe867b70f6bc2376653b02/raw/876ca05861ce3bed421e0970b24563dfdfeb7ca5/input.txt';\n  }\n  fetchParcels() {\n    return this.http.get(this.fileUrl, {\n      responseType: 'text'\n    }).pipe(map(data => this.parseParcels(data)), catchError(error => {\n      console.error(error);\n      return of([]);\n    }));\n  }\n  parseParcels(data) {\n    const parcelLines = data.split('\\n');\n    const parcels = [];\n    for (const parcelLine of parcelLines) {\n      if (parcelLine.trim() === '') {\n        continue; // Skip empty lines\n      }\n\n      const [weightStr, itemsStr] = parcelLine.split(':');\n      const weight = +weightStr.trim();\n      const items = itemsStr.split('(').slice(1).map(item => {\n        const [index, name, weightStr, costStr] = item.split(',').map(item => item.trim().replace(')', ''));\n        const itemWeight = `${+weightStr.trim()}kg`;\n        const itemCost = costStr.trim();\n        return {\n          index,\n          name,\n          weight: itemWeight,\n          cost: itemCost\n        };\n      });\n      const parcel = {\n        weight,\n        items,\n        id: 0,\n        sampleParcelWeight: 0\n      };\n      parcels.push(parcel);\n    }\n    return parcels;\n  }\n}\nParcelDataService.ɵfac = function ParcelDataService_Factory(t) {\n  return new (t || ParcelDataService)(i0.ɵɵinject(i1.HttpClient));\n};\nParcelDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ParcelDataService,\n  factory: ParcelDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAAqBC,EAAE,QAAQ,MAAM;;;AAQrC,OAAM,MAAOC,iBAAiB;EAG5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,uIAAuI;EAEjH;EAExCC,YAAY;IACV,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,IAAI,CAACC,OAAO,EAAE;MAAEC,YAAY,EAAE;IAAM,CAAE,CAAC,CAACC,IAAI,CAC/DT,GAAG,CAAEU,IAAY,IAAK,IAAI,CAACC,YAAY,CAACD,IAAI,CAAC,CAAC,EAC9CX,UAAU,CAAEa,KAAU,IAAI;MACxBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,OAAOX,EAAE,CAAC,EAAE,CAAC;IACf,CAAC,CAAC,CACH;EACH;EAEQU,YAAY,CAACD,IAAY;IAC/B,MAAMI,WAAW,GAAGJ,IAAI,CAACK,KAAK,CAAC,IAAI,CAAC;IACpC,MAAMC,OAAO,GAAa,EAAE;IAE5B,KAAK,MAAMC,UAAU,IAAIH,WAAW,EAAE;MACpC,IAAIG,UAAU,CAACC,IAAI,EAAE,KAAK,EAAE,EAAE;QAC5B,SAAS,CAAC;;;MAEZ,MAAM,CAACC,SAAS,EAAEC,QAAQ,CAAC,GAAGH,UAAU,CAACF,KAAK,CAAC,GAAG,CAAC;MACnD,MAAMM,MAAM,GAAG,CAACF,SAAS,CAACD,IAAI,EAAE;MAChC,MAAMI,KAAK,GAAGF,QAAQ,CAACL,KAAK,CAAC,GAAG,CAAC,CAACQ,KAAK,CAAC,CAAC,CAAC,CAACvB,GAAG,CAAEwB,IAAI,IAAI;QACtD,MAAM,CAACC,KAAK,EAAEC,IAAI,EAAEP,SAAS,EAAEQ,OAAO,CAAC,GAAGH,IAAI,CAACT,KAAK,CAAC,GAAG,CAAC,CAACf,GAAG,CAAEwB,IAAI,IAAKA,IAAI,CAACN,IAAI,EAAE,CAACU,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACrG,MAAMC,UAAU,GAAG,GAAG,CAACV,SAAS,CAACD,IAAI,EAAE,IAAI;QAC3C,MAAMY,QAAQ,GAAGH,OAAO,CAACT,IAAI,EAAE;QAC/B,OAAO;UAAEO,KAAK;UAAEC,IAAI;UAAEL,MAAM,EAAEQ,UAAU;UAAEE,IAAI,EAAED;QAAQ,CAAU;MACpE,CAAC,CAAC;MAEF,MAAME,MAAM,GAAW;QACnBX,MAAM;QACNC,KAAK;QACLW,EAAE,EAAE,CAAC;QACLC,kBAAkB,EAAE;OACvB;MAEDlB,OAAO,CAACmB,IAAI,CAACH,MAAM,CAAC;;IAGtB,OAAOhB,OAAO;EAChB;;AA3CWd,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAkC,SAAjBlC,iBAAiB;EAAAmC,YAFhB;AAAM","names":["catchError","map","of","ParcelDataService","constructor","http","fetchParcels","get","fileUrl","responseType","pipe","data","parseParcels","error","console","parcelLines","split","parcels","parcelLine","trim","weightStr","itemsStr","weight","items","slice","item","index","name","costStr","replace","itemWeight","itemCost","cost","parcel","id","sampleParcelWeight","push","factory","providedIn"],"sourceRoot":"","sources":["C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\services\\parcel-data-service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Item } from '../interfaces/item.interface';\r\nimport { Parcel } from '../interfaces/parcel.interface';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ParcelDataService {\r\n  private fileUrl = 'https://gist.githubusercontent.com/Lynne88git/552c061f4ebe867b70f6bc2376653b02/raw/876ca05861ce3bed421e0970b24563dfdfeb7ca5/input.txt';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  fetchParcels(): Observable<Parcel[]> {\r\n    return this.http.get(this.fileUrl, { responseType: 'text' }).pipe(\r\n      map((data: string) => this.parseParcels(data)),\r\n      catchError((error: any) => {\r\n        console.error(error);\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n\r\n  private parseParcels(data: string): Parcel[] {\r\n    const parcelLines = data.split('\\n');\r\n    const parcels: Parcel[] = [];\r\n\r\n    for (const parcelLine of parcelLines) {\r\n      if (parcelLine.trim() === '') {\r\n        continue; // Skip empty lines\r\n      }\r\n      const [weightStr, itemsStr] = parcelLine.split(':');\r\n      const weight = +weightStr.trim();\r\n      const items = itemsStr.split('(').slice(1).map((item) => {\r\n        const [index, name, weightStr, costStr] = item.split(',').map((item) => item.trim().replace(')', ''));\r\n        const itemWeight = `${+weightStr.trim()}kg`;\r\n        const itemCost = costStr.trim();\r\n        return { index, name, weight: itemWeight, cost: itemCost } as Item;\r\n      });\r\n\r\n      const parcel: Parcel = {\r\n          weight,\r\n          items, \r\n          id: 0,\r\n          sampleParcelWeight: 0\r\n      };\r\n\r\n      parcels.push(parcel);\r\n    }\r\n\r\n    return parcels;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}