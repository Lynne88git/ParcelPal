{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nlet PackingFormComponent = class PackingFormComponent {\n  constructor(fb, http) {\n    this.fb = fb;\n    this.http = http;\n    this.packingForm = new FormGroup({});\n    this.availableItems = []; // Update this with the items from input.txt\n    this.sampleParcelWeights = []; // Update this with the sample parcel weights from input.txt\n    this.selectedItems = [];\n  }\n  ngOnInit() {\n    this.initForm();\n    const filePath = 'assets/input.txt';\n    this.http.get(filePath, {\n      responseType: 'text'\n    }).subscribe(response => {\n      this.parseInputFile(response); // Parse the input.txt file and update availableItems and sampleParcelWeights arrays\n    }, error => {\n      console.error(error);\n    });\n  }\n  initForm() {\n    this.packingForm = this.fb.group({\n      weightLimit: ['', Validators.required],\n      items: this.fb.array([])\n    });\n    this.packingForm.get('weightLimit')?.valueChanges.subscribe(selectedWeight => {\n      this.filterItemsByWeight(selectedWeight);\n    });\n  }\n  get items() {\n    return this.packingForm.get('items');\n  }\n  addItem() {\n    this.items.push(this.createItemGroup());\n  }\n  removeItem(index) {\n    this.items.removeAt(index);\n  }\n  createItemGroup() {\n    return this.fb.group({\n      index: ['', Validators.required],\n      weight: [{\n        value: '',\n        disabled: true\n      }],\n      cost: [{\n        value: '',\n        disabled: true\n      }]\n    });\n  }\n  filterItemsByWeight(selectedWeight) {\n    // Filter availableItems based on selectedWeight and update the item dropdown options\n  }\n  parseInputFile(fileContent) {\n    console.log('File Content:', fileContent); // Log the file content to check if it's correctly loaded\n    const lines = fileContent.split('\\n');\n    for (const line of lines) {\n      if (line.trim() === '') {\n        continue; // Skip empty lines\n      }\n\n      const [weightStr, itemsStr] = line.split(':');\n      console.log('Weight:', weightStr.trim()); // Log the weight string\n      console.log('Items:', itemsStr.trim()); // Log the items string\n      const weight = +weightStr.trim();\n      const items = itemsStr.split('(').slice(1).map(item => {\n        const [index, name, weightStr, costStr] = item.split(',').map(item => item.trim().replace(')', ''));\n        const weight = +weightStr.trim();\n        const cost = +costStr.trim();\n        return {\n          index,\n          name,\n          weight,\n          cost\n        };\n      });\n      this.sampleParcelWeights.push(weight);\n      this.selectedItems.push({\n        weight,\n        items\n      });\n    }\n  }\n  submitForm() {\n    if (this.packingForm.valid) {\n      const formValue = this.packingForm.value;\n      console.log(formValue);\n    }\n  }\n};\nPackingFormComponent = __decorate([Component({\n  selector: 'app-packing-form',\n  templateUrl: './packing-form.component.html',\n  styleUrls: ['./packing-form.component.css']\n})], PackingFormComponent);\nexport { PackingFormComponent };","map":{"version":3,"mappings":"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","names":["Component","FormGroup","Validators","PackingFormComponent","constructor","fb","http","ngOnInit","initForm","filePath","get","responseType","subscribe","response","parseInputFile","error","console","packingForm","group","weightLimit","required","items","array","valueChanges","selectedWeight","filterItemsByWeight","addItem","push","createItemGroup","removeItem","index","removeAt","weight","value","disabled","cost","fileContent","log","lines","split","line","trim","weightStr","itemsStr","slice","map","item","name","costStr","replace","sampleParcelWeights","selectedItems","submitForm","valid","formValue","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\packing-form\\packing-form.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-packing-form',\r\n  templateUrl: './packing-form.component.html',\r\n  styleUrls: ['./packing-form.component.css']\r\n})\r\nexport class PackingFormComponent implements OnInit {\r\n  packingForm: FormGroup = new FormGroup({});\r\n  availableItems: any[] = []; // Update this with the items from input.txt\r\n  sampleParcelWeights: number[] = []; // Update this with the sample parcel weights from input.txt\r\n  selectedItems: { weight: number, items: any[] }[] = [];\r\n\r\n  constructor(private fb: FormBuilder, private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    const filePath = 'assets/input.txt';\r\n    this.http.get(filePath, { responseType: 'text' }).subscribe(\r\n      (response) => {\r\n        this.parseInputFile(response);// Parse the input.txt file and update availableItems and sampleParcelWeights arrays\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  initForm(): void {\r\n    this.packingForm = this.fb.group({\r\n      weightLimit: ['', Validators.required],\r\n      items: this.fb.array([])\r\n    });\r\n\r\n    this.packingForm.get('weightLimit')?.valueChanges.subscribe((selectedWeight) => {\r\n      this.filterItemsByWeight(selectedWeight);\r\n    });\r\n  }\r\n\r\n  get items(): FormArray {\r\n    return this.packingForm.get('items') as FormArray;\r\n  }\r\n\r\n  addItem(): void {\r\n    this.items.push(this.createItemGroup());\r\n  }\r\n\r\n  removeItem(index: number): void {\r\n  this.items.removeAt(index);\r\n  }\r\n\r\n  createItemGroup(): FormGroup {\r\n    return this.fb.group({\r\n      index: ['', Validators.required],\r\n      weight: [{ value: '', disabled: true }],\r\n      cost: [{ value: '', disabled: true }]\r\n    });\r\n  }\r\n\r\n  filterItemsByWeight(selectedWeight: number): void {\r\n    // Filter availableItems based on selectedWeight and update the item dropdown options\r\n  }\r\n\r\n  parseInputFile(fileContent: string): void {\r\n    console.log('File Content:', fileContent); // Log the file content to check if it's correctly loaded\r\n    const lines = fileContent.split('\\n');\r\n\r\n    for (const line of lines) {\r\n      if (line.trim() === '') {\r\n        continue; // Skip empty lines\r\n      }\r\n      const [weightStr, itemsStr] = line.split(':');\r\n      console.log('Weight:', weightStr.trim()); // Log the weight string\r\n      console.log('Items:', itemsStr.trim()); // Log the items string\r\n      const weight = +weightStr.trim();\r\n      const items = itemsStr.split('(').slice(1).map((item) => {\r\n        const [index, name, weightStr, costStr] = item.split(',').map((item) => item.trim().replace(')', ''));\r\n        const weight = +weightStr.trim();\r\n        const cost = +costStr.trim();\r\n        return { index, name, weight, cost };\r\n      });\r\n\r\n      this.sampleParcelWeights.push(weight);\r\n      this.selectedItems.push({ weight, items });\r\n\r\n    }\r\n  }\r\n\r\n  submitForm(): void {\r\n    if (this.packingForm.valid) {\r\n      const formValue = this.packingForm.value;\r\n      console.log(formValue);\r\n    }\r\n  }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}