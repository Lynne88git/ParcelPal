{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../../services/parcel-data-service\";\nimport * as i4 from \"@angular/common\";\nfunction PackingFormComponent_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 20);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const weightLimit_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", weightLimit_r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", weightLimit_r7, \"kg\");\n  }\n}\nfunction PackingFormComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Please select a parcel/box weight before adding an item. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PackingFormComponent_div_17_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 27);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", option_r11.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r11.label, \" \");\n  }\n}\nfunction PackingFormComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 22)(1, \"div\", 23)(2, \"div\", 24)(3, \"div\", 7)(4, \"label\", 25);\n    i0.ɵɵtext(5, \"Select Item:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"select\", 26);\n    i0.ɵɵlistener(\"change\", function PackingFormComponent_div_17_Template_select_change_6_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onWeightSelected());\n    });\n    i0.ɵɵelementStart(7, \"option\", 27);\n    i0.ɵɵtext(8, \"-- Select Item --\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, PackingFormComponent_div_17_option_9_Template, 2, 2, \"option\", 28);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"div\", 24)(11, \"label\", 29);\n    i0.ɵɵtext(12, \"Weight\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"input\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"div\", 24)(15, \"label\", 29);\n    i0.ɵɵtext(16, \"Cost\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"div\", 31);\n    i0.ɵɵelement(18, \"input\", 32);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"div\", 33)(20, \"button\", 34);\n    i0.ɵɵlistener(\"click\", function PackingFormComponent_div_17_Template_button_click_20_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.addItemToParcel(ctx_r14.selectedItem));\n    });\n    i0.ɵɵtext(21, \"Add to Parcel\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const i_r9 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_2_0;\n    i0.ɵɵproperty(\"formGroupName\", i_r9);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngValue\", null);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.itemsByWeight[(tmp_2_0 = ctx_r2.packingForm.get(\"weightLimit\")) == null ? null : tmp_2_0.value]);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"value\", (ctx_r2.selectedItem == null ? null : ctx_r2.selectedItem.weight) || \"\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"value\", (ctx_r2.selectedItem == null ? null : ctx_r2.selectedItem.cost) || \"\");\n  }\n}\nfunction PackingFormComponent_button_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 35);\n    i0.ɵɵlistener(\"click\", function PackingFormComponent_button_18_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.addItem());\n    });\n    i0.ɵɵtext(1, \"Add Item\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PackingFormComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵtext(1, \" Maximum weight limit exceeded.\\n\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PackingFormComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵtext(1, \" Maximum cost limit exceeded.\\n\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PackingFormComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 37)(1, \"p\", 38);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 39);\n    i0.ɵɵlistener(\"click\", function PackingFormComponent_div_27_Template_div_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const selectedItem_r17 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.removeItem(selectedItem_r17));\n    });\n    i0.ɵɵelement(4, \"img\", 40);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const selectedItem_r17 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(selectedItem_r17.name);\n  }\n}\nexport class PackingFormComponent {\n  constructor(fb, http, parcelDataService) {\n    this.fb = fb;\n    this.http = http;\n    this.parcelDataService = parcelDataService;\n    this.packingForm = new FormGroup({});\n    this.availableItems = []; // Update this with the items from input.txt\n    this.sampleParcelWeights = []; // Update this with the sample parcel weights from input.txt\n    this.selectedItems = [];\n    this.selectedItem = null; // Update this line to store the selected item\n    this.itemsByWeight = {};\n    this.selectedItemsList = []; // Keeping the values in the 'your selection'\n    this.showWeightError = false;\n    this.isParcelSelected = false;\n  }\n  ngOnInit() {\n    this.initForm();\n    this.parcelDataService.fetchParcels().subscribe(parcels => {\n      this.parseInputData(parcels);\n      this.updateItemsByWeight();\n    }, error => {\n      console.error(error);\n    });\n  }\n  initForm() {\n    this.packingForm = this.fb.group({\n      weightLimit: ['', Validators.required],\n      items: this.fb.array([])\n    });\n    this.packingForm.get('weightLimit')?.valueChanges.subscribe(selectedWeight => {\n      this.filterItemsByWeight(selectedWeight);\n    });\n  }\n  get items() {\n    return this.packingForm.get('items');\n  }\n  createItemGroup(item) {\n    return this.fb.group({\n      index: [item.index, Validators.required],\n      weight: [`${item.weight}kg`],\n      cost: [`${item.cost}`]\n    });\n  }\n  addItem() {\n    const selectedWeight = this.packingForm.get('weightLimit')?.value;\n    if (selectedWeight) {\n      const emptyItem = {\n        index: '',\n        name: '',\n        weight: 0,\n        cost: ''\n      };\n      this.items.push(this.createItemGroup(emptyItem));\n    } else {\n      // Display an error message or perform any desired action\n      this.showWeightError = true; // Set the error flag to display the message\n      console.log('Please select a parcel/box weight before adding an item.');\n    }\n  }\n  removeItem(selectedItem) {\n    const index = this.selectedItemsList.indexOf(selectedItem);\n    if (index !== -1) {\n      this.selectedItemsList.splice(index, 1); // Remove the item from the selectedItemsList\n      console.log('Selected Items:', this.selectedItemsList); // Log the updated selectedItemsList\n    }\n  }\n\n  filterItemsByWeight(selectedWeight) {\n    const selectedItems = this.selectedItems.find(item => item.weight === selectedWeight);\n    if (selectedItems) {\n      this.availableItems = selectedItems.items;\n    } else {\n      this.availableItems = [];\n    }\n  }\n  parseInputData(parcels) {\n    for (const parcel of parcels) {\n      this.sampleParcelWeights.push(parcel.weight);\n      this.selectedItems.push({\n        weight: parcel.weight,\n        items: parcel.items\n      });\n      this.itemsByWeight[parcel.weight] = parcel.items.map(item => ({\n        value: {\n          index: item.index,\n          name: item.name,\n          weight: item.weight,\n          cost: item.cost\n        },\n        label: `${item.index}, ${item.name}`,\n        weight: `${item.weight}kg`,\n        cost: `${item.cost}`\n      }));\n    }\n  }\n  updateItemsByWeight() {\n    for (const {\n      weight,\n      items\n    } of this.selectedItems) {\n      this.itemsByWeight[weight] = items.map(item => ({\n        value: {\n          index: item.index,\n          name: item.name,\n          weight: item.weight,\n          cost: item.cost\n        },\n        label: `${item.index}, ${item.name}`,\n        weight: `${item.weight}kg`,\n        cost: `${item.cost}`,\n        selectedItem: false // Add a new property to track selection\n      }));\n    }\n  }\n\n  addItemToParcel(item) {\n    if (item) {\n      const selectedItem = {\n        index: item.value.index,\n        name: item.value.name,\n        weight: item.value.weight,\n        cost: item.value.cost\n      };\n      this.selectedItemsList.push(selectedItem);\n      console.log('Selected Item:', selectedItem);\n    }\n  }\n  submitForm() {\n    if (this.packingForm.valid) {\n      const formValue = this.packingForm.value;\n      console.log(formValue);\n    }\n  }\n  onWeightSelected() {\n    const weightLimit = this.packingForm.get('weightLimit')?.value;\n    const selectedItemIndex = this.packingForm.get('items')?.value[this.items.controls.length - 1]?.index;\n    if (weightLimit && selectedItemIndex !== null) {\n      const selectedItems = this.itemsByWeight[weightLimit];\n      const selectedItem = selectedItems.find(item => item.value === selectedItemIndex);\n      if (selectedItem) {\n        this.selectedItem = selectedItem;\n        this.selectedItemsList.push(selectedItem.value); // Add the selected item to the selectedItemsList\n        console.log('Selected Items:', this.selectedItemsList); // Log the selectedItemsList\n        this.isParcelSelected = true;\n      }\n    }\n  }\n}\nPackingFormComponent.ɵfac = function PackingFormComponent_Factory(t) {\n  return new (t || PackingFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.ParcelDataService));\n};\nPackingFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PackingFormComponent,\n  selectors: [[\"app-packing-form\"]],\n  decls: 28,\n  vars: 9,\n  consts: [[1, \"container-fluid\"], [1, \"row\"], [1, \"d-flex\", \"justify-content-center\", \"mt-5\"], [\"src\", \"../../assets/logo.png\", \"alt\", \"App Logo\", 1, \"app-logo\"], [1, \"col-md-6\"], [1, \"p-5\", \"packingForm\", 3, \"formGroup\", \"ngSubmit\"], [1, \"text-light\", \"mb-2\"], [1, \"form-group\"], [\"for\", \"weight\", 1, \"text-light\", \"my-2\"], [\"id\", \"weight\", \"formControlName\", \"weightLimit\", 1, \"form-control\", 3, \"change\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"formArrayName\", \"items\"], [\"class\", \"item-group\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"btn btn-yellow py-2 my-2\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-yellow\", \"w-100\", 3, \"disabled\", \"click\"], [1, \"text-light\", \"mb-2\", \"p-5\"], [\"class\", \"selected-item d-flex flex-row\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"text-danger\"], [1, \"item-group\", 3, \"formGroupName\"], [1, \"form-row\", \"w-50\", \"mt-4\"], [1, \"col\"], [\"for\", \"selectedItem\", 1, \"text-light\"], [\"formControlName\", \"index\", 1, \"form-control\", 3, \"change\"], [3, \"ngValue\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [1, \"text-light\"], [\"type\", \"text\", \"formControlName\", \"weight\", \"readonly\", \"\", 1, \"form-control\", 3, \"value\"], [1, \"input-group\"], [\"type\", \"text\", \"formControlName\", \"cost\", \"readonly\", \"\", 1, \"form-control\", 3, \"value\"], [1, \"d-flex\", \"justify-content-start\"], [\"type\", \"button\", 1, \"btn\", \"btn-yellow\", \"py-2\", \"my-4\", \"w-100\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-yellow\", \"py-2\", \"my-2\", 3, \"click\"], [1, \"error-message\"], [1, \"selected-item\", \"d-flex\", \"flex-row\"], [1, \"text-light\", \"mb-2\", \"px-5\"], [3, \"click\"], [\"src\", \"../../assets/close.png\", \"alt\", \"Remove Item\", 1, \"remove-button\"]],\n  template: function PackingFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"img\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 4)(5, \"form\", 5);\n      i0.ɵɵlistener(\"ngSubmit\", function PackingFormComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵelementStart(6, \"h4\", 6);\n      i0.ɵɵtext(7, \"Choose a Sample Size Shipping Box\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 7)(9, \"label\", 8);\n      i0.ɵɵtext(10, \"Weight\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"select\", 9);\n      i0.ɵɵlistener(\"change\", function PackingFormComponent_Template_select_change_11_listener() {\n        return ctx.onWeightSelected();\n      });\n      i0.ɵɵelementStart(12, \"option\", 10);\n      i0.ɵɵtext(13, \"-- Select Weight Limit --\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(14, PackingFormComponent_option_14_Template, 2, 2, \"option\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(15, PackingFormComponent_div_15_Template, 2, 0, \"div\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 13);\n      i0.ɵɵtemplate(17, PackingFormComponent_div_17_Template, 22, 5, \"div\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(18, PackingFormComponent_button_18_Template, 2, 0, \"button\", 15);\n      i0.ɵɵtemplate(19, PackingFormComponent_div_19_Template, 2, 0, \"div\", 16);\n      i0.ɵɵtemplate(20, PackingFormComponent_div_20_Template, 2, 0, \"div\", 16);\n      i0.ɵɵelementStart(21, \"button\", 17);\n      i0.ɵɵlistener(\"click\", function PackingFormComponent_Template_button_click_21_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵtext(22, \"Submit\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(23, \"div\", 4)(24, \"h4\", 18);\n      i0.ɵɵtext(25, \"Your Selection:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"div\");\n      i0.ɵɵtemplate(27, PackingFormComponent_div_27_Template, 5, 1, \"div\", 19);\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.packingForm);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngForOf\", ctx.sampleParcelWeights);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showWeightError);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.items.controls);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isParcelSelected);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showWeightLimitError);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showCostLimitError);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.packingForm.valid || ctx.items.length === 0);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.selectedItemsList);\n    }\n  },\n  dependencies: [i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName],\n  styles: [\".item-group[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.btn-danger[_ngcontent-%COMP%] {\\r\\n  margin-left: 10px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9wYWNraW5nLWZvcm0vcGFja2luZy1mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQiIsInNvdXJjZXNDb250ZW50IjpbIi5pdGVtLWdyb3VwIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxufVxyXG5cclxuLmJ0bi1kYW5nZXIge1xyXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","Validators","i0","PackingFormComponent","constructor","fb","http","parcelDataService","ngOnInit","initForm","fetchParcels","subscribe","parcels","parseInputData","updateItemsByWeight","error","console","packingForm","group","weightLimit","required","items","array","get","valueChanges","selectedWeight","filterItemsByWeight","createItemGroup","item","index","weight","cost","addItem","value","emptyItem","name","push","showWeightError","log","removeItem","selectedItem","selectedItemsList","indexOf","splice","selectedItems","find","availableItems","parcel","sampleParcelWeights","itemsByWeight","map","label","addItemToParcel","submitForm","valid","formValue","onWeightSelected","selectedItemIndex","controls","length","isParcelSelected","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\components\\packing-form\\packing-form.component.ts","C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\components\\packing-form\\packing-form.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Item } from '../../interfaces/item.interface';\r\nimport { Parcel } from '../../interfaces/parcel.interface';\r\nimport { ParcelDataService } from '../../services/parcel-data-service';\r\n\r\n@Component({\r\n  selector: 'app-packing-form',\r\n  templateUrl: './packing-form.component.html',\r\n  styleUrls: ['./packing-form.component.css']\r\n})\r\nexport class PackingFormComponent implements OnInit {\r\n  packingForm: FormGroup = new FormGroup({});\r\n  availableItems: Item[] = []; // Update this with the items from input.txt\r\n  sampleParcelWeights: number[] = []; // Update this with the sample parcel weights from input.txt\r\n  selectedItems: { weight: number, items: Item[] }[] = [];\r\n  selectedItem: Item | null = null; // Update this line to store the selected item\r\n  itemsByWeight: Record<number, any[]> = {};\r\n  selectedItemsList: any[] = []; // Keeping the values in the 'your selection'\r\n  showWeightError = false;\r\n  isParcelSelected = false;\r\n\r\n  constructor(private fb: FormBuilder,\r\n    private http: HttpClient,\r\n    private parcelDataService: ParcelDataService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    this.parcelDataService.fetchParcels().subscribe(\r\n      (parcels: Parcel[]) => {\r\n        this.parseInputData(parcels);\r\n        this.updateItemsByWeight();\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  initForm(): void {\r\n    this.packingForm = this.fb.group({\r\n      weightLimit: ['', Validators.required],\r\n      items: this.fb.array([])\r\n    });\r\n\r\n    this.packingForm.get('weightLimit')?.valueChanges.subscribe((selectedWeight) => {\r\n      this.filterItemsByWeight(selectedWeight);\r\n    });\r\n  }\r\n\r\n  get items(): FormArray {\r\n    return this.packingForm.get('items') as FormArray;\r\n  }\r\n\r\n  createItemGroup(item: Item): FormGroup {\r\n    return this.fb.group({\r\n      index: [item.index, Validators.required],\r\n      weight: [`${item.weight}kg`],\r\n      cost: [`${item.cost}`]\r\n    });\r\n  }\r\n\r\n  addItem(): void {\r\n    const selectedWeight = this.packingForm.get('weightLimit')?.value;\r\n    if (selectedWeight) {\r\n    const emptyItem: Item = { index: '', name: '', weight: 0, cost: '' };\r\n      this.items.push(this.createItemGroup(emptyItem));\r\n    } else {\r\n      // Display an error message or perform any desired action\r\n      this.showWeightError = true; // Set the error flag to display the message\r\n      console.log('Please select a parcel/box weight before adding an item.');\r\n    }\r\n  }\r\n\r\n  removeItem(selectedItem: any): void {\r\n    const index = this.selectedItemsList.indexOf(selectedItem);\r\n    if (index !== -1) {\r\n      this.selectedItemsList.splice(index, 1); // Remove the item from the selectedItemsList\r\n      console.log('Selected Items:', this.selectedItemsList); // Log the updated selectedItemsList\r\n    }\r\n  }\r\n\r\n\r\n  filterItemsByWeight(selectedWeight: number): void {\r\n    const selectedItems = this.selectedItems.find(item => item.weight === selectedWeight);\r\n    if (selectedItems) {\r\n      this.availableItems = selectedItems.items;\r\n    } else {\r\n      this.availableItems = [];\r\n    }\r\n  }\r\n\r\n  parseInputData(parcels: Parcel[]): void {\r\n    for (const parcel of parcels) {\r\n      this.sampleParcelWeights.push(parcel.weight);\r\n      this.selectedItems.push({ weight: parcel.weight, items: parcel.items });\r\n\r\n      this.itemsByWeight[parcel.weight] = parcel.items.map((item) => ({\r\n        value: { index: item.index, name: item.name, weight: item.weight, cost: item.cost },\r\n        label: `${item.index}, ${item.name}`,\r\n        weight: `${item.weight}kg`,\r\n        cost: `${item.cost}`\r\n      }));\r\n    }\r\n  }\r\n\r\n\r\n  updateItemsByWeight(): void {\r\n    for (const { weight, items } of this.selectedItems) {\r\n      this.itemsByWeight[weight] = items.map((item) => ({\r\n        value: { index: item.index, name: item.name, weight: item.weight, cost: item.cost },\r\n        label: `${item.index}, ${item.name}`,\r\n        weight: `${item.weight}kg`,\r\n        cost: `${item.cost}`,\r\n        selectedItem: false // Add a new property to track selection\r\n      }));\r\n    }\r\n  }\r\n\r\n  addItemToParcel(item: any): void {\r\n    if (item) {\r\n      const selectedItem = {\r\n        index: item.value.index,\r\n        name: item.value.name,\r\n        weight: item.value.weight,\r\n        cost: item.value.cost\r\n      };\r\n      this.selectedItemsList.push(selectedItem);\r\n      console.log('Selected Item:', selectedItem);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  submitForm(): void {\r\n    if (this.packingForm.valid) {\r\n      const formValue = this.packingForm.value;\r\n      console.log(formValue);\r\n    }\r\n  }\r\n\r\n  onWeightSelected(): void {\r\n    const weightLimit = this.packingForm.get('weightLimit')?.value;\r\n    const selectedItemIndex = this.packingForm.get('items')?.value[this.items.controls.length - 1]?.index;\r\n\r\n    if (weightLimit && selectedItemIndex !== null) {\r\n      const selectedItems = this.itemsByWeight[weightLimit];\r\n      const selectedItem = selectedItems.find(item => item.value === selectedItemIndex);\r\n\r\n      if (selectedItem) {\r\n        this.selectedItem = selectedItem;\r\n        this.selectedItemsList.push(selectedItem.value); // Add the selected item to the selectedItemsList\r\n        console.log('Selected Items:', this.selectedItemsList); // Log the selectedItemsList\r\n        this.isParcelSelected = true;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","\r\n <div class=\"container-fluid\">\r\n  <div class=\"row\">\r\n   <div class=\"d-flex justify-content-center mt-5\">\r\n                <img src=\"../../assets/logo.png\" alt=\"App Logo\" class=\"app-logo\">\r\n            </div>\r\n    <div class=\"col-md-6\">\r\n      <form class=\"p-5 packingForm\" [formGroup]=\"packingForm\" (ngSubmit)=\"submitForm()\">\r\n                <h4 class=\"text-light mb-2\">Choose a Sample Size Shipping Box</h4>\r\n\r\n                <div class=\"form-group\">\r\n                    <label for=\"weight\" class=\"text-light my-2\">Weight</label>\r\n                    <!-- Weight dropdown -->\r\n                    <select class=\"form-control\" id=\"weight\" formControlName=\"weightLimit\" (change)=\"onWeightSelected()\">\r\n                        <option value=\"\">-- Select Weight Limit --</option>\r\n                        <option *ngFor=\"let weightLimit of sampleParcelWeights\" [value]=\"weightLimit\">{{ weightLimit }}kg</option>\r\n                    </select>\r\n                      <div class=\"text-danger\" *ngIf=\"showWeightError\">\r\n                                Please select a parcel/box weight before adding an item.\r\n                      </div>\r\n                </div>\r\n\r\n                <div formArrayName=\"items\">\r\n                    <div class=\"item-group\" *ngFor=\"let itemGroup of items.controls; let i = index\" [formGroupName]=\"i\">\r\n                        <div class=\"form-row w-50 mt-4\">\r\n                            <div class=\"col\">\r\n                                <div class=\"form-group\">\r\n                                    <label class=\"text-light\" for=\"selectedItem\">Select Item:</label>\r\n                                    <select class=\"form-control\" formControlName=\"index\" (change)=\"onWeightSelected()\">\r\n                                        <option [ngValue]=\"null\">-- Select Item --</option>\r\n                                        <option *ngFor=\"let option of itemsByWeight[packingForm.get('weightLimit')?.value]\" [ngValue]=\"option.value\">\r\n                                            {{ option.label }}\r\n                                        </option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col\">\r\n                                <label class=\"text-light\">Weight</label>\r\n                                <input type=\"text\" class=\"form-control\" formControlName=\"weight\" [value]=\"selectedItem?.weight || ''\" readonly>\r\n                            </div>\r\n                            <div class=\"col\">\r\n                                <label class=\"text-light\">Cost</label>\r\n                                <div class=\"input-group\">\r\n                                    <input type=\"text\" class=\"form-control\" formControlName=\"cost\" [value]=\"selectedItem?.cost || ''\" readonly>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"d-flex justify-content-start\">\r\n                                 <button type=\"button\" class=\"btn btn-yellow py-2 my-4 w-100\" (click)=\"addItemToParcel(selectedItem)\">Add to Parcel</button>\r\n                            </div>\r\n                        </div>\r\n                \r\n                    </div>\r\n                </div>\r\n\r\n        <button class=\"btn btn-yellow py-2 my-2\" *ngIf=\"!isParcelSelected\" type=\"button\" (click)=\"addItem()\">Add Item</button>\r\n\r\n        <!-- Display weight limit error message -->\r\n<div *ngIf=\"showWeightLimitError\" class=\"error-message\">\r\n  Maximum weight limit exceeded.\r\n</div>\r\n\r\n<!-- Display cost limit error message -->\r\n<div *ngIf=\"showCostLimitError\" class=\"error-message\">\r\n  Maximum cost limit exceeded.\r\n</div>\r\n\r\n        <button class=\"btn btn-yellow w-100\" type=\"submit\" [disabled]=\"!packingForm.valid || items.length === 0\" (click)=\"submitForm()\">Submit</button>\r\n    \r\n      </form>\r\n    </div>\r\n    <div class=\"col-md-6\">\r\n            <h4 class=\"text-light mb-2 p-5\">Your Selection:</h4>\r\n             <div>\r\n  <div class=\"selected-item d-flex flex-row\" *ngFor=\"let selectedItem of selectedItemsList\" >\r\n    <p class=\"text-light mb-2 px-5\">{{ selectedItem.name }}</p>\r\n    <div (click)=\"removeItem(selectedItem)\">\r\n     <img src=\"../../assets/close.png\" alt=\"Remove Item\" class=\"remove-button\">\r\n     </div>\r\n  </div>\r\n</div>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}