{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ParcelDataService {\n  constructor(http) {\n    this.http = http;\n    this.fileUrl = 'https://gist.githubusercontent.com/Lynne88git/552c061f4ebe867b70f6bc2376653b02/raw/876ca05861ce3bed421e0970b24563dfdfeb7ca5/input.txt';\n  }\n  fetchParcels() {\n    return this.http.get(this.fileUrl, {\n      responseType: 'text'\n    }).pipe(map(data => this.parseParcels(data)), catchError(error => {\n      console.error(error);\n      return of([]);\n    }));\n  }\n  fetchSampleParcelWeights() {\n    return this.fetchParcels().pipe(map(parcels => {\n      const weights = [];\n      parcels.forEach(parcel => {\n        weights.push(parcel.sampleParcelWeight);\n      });\n      return weights;\n    }), catchError(error => {\n      console.error(error);\n      return of([]);\n    }));\n  }\n  fetchItemsByWeight(weight) {\n    return this.fetchParcels().pipe(map(parcels => {\n      const items = [];\n      parcels.forEach(parcel => {\n        if (parcel.sampleParcelWeight === weight) {\n          items.push(...parcel.items);\n        }\n      });\n      return items;\n    }), catchError(error => {\n      console.error(error);\n      return of([]);\n    }));\n  }\n  parseParcels(data) {\n    const parcelLines = data.split('\\n');\n    const parcels = [];\n    for (const parcelLine of parcelLines) {\n      const parcelData = parcelLine.trim().split(' : ');\n      const parcelId = Number(parcelData[0]);\n      const itemData = parcelData[1].split(') ');\n      const items = [];\n      for (const itemString of itemData) {\n        const itemInfo = itemString.substring(itemString.indexOf('(') + 1).split(', ');\n        const itemId = Number(itemInfo[0]);\n        const itemName = itemInfo[1];\n        const itemWeight = parseFloat(itemInfo[2]);\n        const itemPrice = parseFloat(itemInfo[3].replace('€', ''));\n        const item = {\n          index: itemId.toString(),\n          name: itemName,\n          weight: itemWeight,\n          cost: itemPrice\n        };\n        items.push(item);\n      }\n      const sampleParcelWeight = items.reduce((totalWeight, item) => totalWeight + item.weight, 0);\n      const parcel = {\n        id: parcelId,\n        sampleParcelWeight: sampleParcelWeight,\n        items: items\n      };\n      parcels.push(parcel);\n    }\n    return parcels;\n  }\n}\nParcelDataService.ɵfac = function ParcelDataService_Factory(t) {\n  return new (t || ParcelDataService)(i0.ɵɵinject(i1.HttpClient));\n};\nParcelDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ParcelDataService,\n  factory: ParcelDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","map","of","ParcelDataService","constructor","http","fetchParcels","get","fileUrl","responseType","pipe","data","parseParcels","error","console","fetchSampleParcelWeights","parcels","weights","forEach","parcel","push","sampleParcelWeight","fetchItemsByWeight","weight","items","parcelLines","split","parcelLine","parcelData","trim","parcelId","Number","itemData","itemString","itemInfo","substring","indexOf","itemId","itemName","itemWeight","parseFloat","itemPrice","replace","item","index","toString","name","cost","reduce","totalWeight","id","factory","providedIn"],"sourceRoot":"","sources":["C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\services\\parcel-data-service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs'\r\nimport { Item } from '../interfaces/item.interface';\r\nimport { Parcel } from '../interfaces/parcel.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ParcelDataService {\r\n  private fileUrl = 'https://gist.githubusercontent.com/Lynne88git/552c061f4ebe867b70f6bc2376653b02/raw/876ca05861ce3bed421e0970b24563dfdfeb7ca5/input.txt';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  fetchParcels(): Observable<Parcel[]> {\r\n    return this.http.get(this.fileUrl, { responseType: 'text' }).pipe(\r\n      map((data: string) => this.parseParcels(data)),\r\n      catchError((error: any) => {\r\n        console.error(error);\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n\r\n  fetchSampleParcelWeights(): Observable<number[]> {\r\n    return this.fetchParcels().pipe(\r\n      map((parcels: Parcel[]) => {\r\n        const weights: number[] = [];\r\n        parcels.forEach((parcel: Parcel) => {\r\n          weights.push(parcel.sampleParcelWeight);\r\n        });\r\n        return weights;\r\n      }),\r\n      catchError((error: any) => {\r\n        console.error(error);\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n\r\n  fetchItemsByWeight(weight: number): Observable<Item[]> {\r\n    return this.fetchParcels().pipe(\r\n      map((parcels: Parcel[]) => {\r\n        const items: Item[] = [];\r\n        parcels.forEach((parcel: Parcel) => {\r\n          if (parcel.sampleParcelWeight === weight) {\r\n            items.push(...parcel.items);\r\n          }\r\n        });\r\n        return items;\r\n      }),\r\n      catchError((error: any) => {\r\n        console.error(error);\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n\r\n  private parseParcels(data: string): Parcel[] {\r\n    const parcelLines = data.split('\\n');\r\n    const parcels: Parcel[] = [];\r\n\r\n    for (const parcelLine of parcelLines) {\r\n      const parcelData = parcelLine.trim().split(' : ');\r\n      const parcelId = Number(parcelData[0]);\r\n      const itemData = parcelData[1].split(') ');\r\n\r\n      const items: Item[] = [];\r\n\r\n      for (const itemString of itemData) {\r\n        const itemInfo = itemString.substring(itemString.indexOf('(') + 1).split(', ');\r\n        const itemId = Number(itemInfo[0]);\r\n        const itemName = itemInfo[1];\r\n        const itemWeight = parseFloat(itemInfo[2]);\r\n        const itemPrice = parseFloat(itemInfo[3].replace('€', ''));\r\n\r\n        const item: Item = {\r\n          index: itemId.toString(),\r\n          name: itemName,\r\n          weight: itemWeight,\r\n          cost: itemPrice\r\n        };\r\n\r\n        items.push(item);\r\n      }\r\n\r\n      const sampleParcelWeight = items.reduce((totalWeight, item) => totalWeight + item.weight, 0);\r\n\r\n      const parcel: Parcel = {\r\n        id: parcelId,\r\n        sampleParcelWeight: sampleParcelWeight,\r\n        items: items\r\n      };\r\n\r\n      parcels.push(parcel);\r\n    }\r\n\r\n    return parcels;\r\n  }\r\n\r\n  //fetchItems(): Promise<Item[]> {\r\n  //  // Fetch the items from the API and return them\r\n  //  // Replace this with your actual API call or data retrieval logic\r\n  //  return this.http.get<Item[]>('https://api.example.com/items').toPromise();\r\n  //}\r\n\r\n  //fetchParcelWeights(): Promise<number[]> {\r\n  //  // Fetch the parcel weights from the API and return them\r\n  //  // Replace this with your actual API call or data retrieval logic\r\n  //  return this.http.get<number[]>('https://api.example.com/parcel-weights').toPromise();\r\n  //}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}