{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/parcel-data-service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction PackingFormComponent_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const weight_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", weight_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(weight_r1);\n  }\n}\nexport class PackingFormComponent {\n  constructor(parcelDataService, formBuilder) {\n    this.parcelDataService = parcelDataService;\n    this.formBuilder = formBuilder;\n    this.parcels = [];\n    this.sampleParcelWeights = []; // Sample parcel weights fetched from the API\n    this.itemsByWeight = {}; // Items grouped by weight\n    this.packingForm = this.formBuilder.group({\n      weightLimit: [''],\n      items: this.formBuilder.array([])\n    });\n  }\n  ngOnInit() {\n    this.fetchData();\n  }\n  fetchData() {\n    this.parcelDataService.fetchParcels().subscribe(parcels => {\n      this.parcels = parcels;\n      this.populateSampleParcelWeights();\n      this.populateItemsByWeight();\n    }, error => {\n      console.error(error);\n    });\n  }\n  populateSampleParcelWeights() {\n    this.sampleParcelWeights = this.parcels.map(parcel => parcel.sampleParcelWeight);\n  }\n  populateItemsByWeight() {\n    for (const parcel of this.parcels) {\n      const weight = parcel.sampleParcelWeight;\n      if (!this.itemsByWeight[weight]) {\n        this.itemsByWeight[weight] = parcel.items;\n      }\n    }\n  }\n  get items() {\n    return this.packingForm.get('items');\n  }\n  addItem() {\n    const itemGroup = this.formBuilder.group({\n      index: [''],\n      weight: [''],\n      cost: ['']\n    });\n    this.items.push(itemGroup);\n  }\n  removeItem(index) {\n    this.items.removeAt(index);\n  }\n  onWeightSelected() {\n    const selectedWeight = this.packingForm.get('weightLimit')?.value;\n    const selectedItems = this.itemsByWeight[selectedWeight] || [];\n    this.items.controls.forEach(control => {\n      control.get('index')?.setValue(null);\n    });\n    selectedItems.forEach((item, index) => {\n      const control = this.items.at(index);\n      control.get('index')?.setValue(item.index);\n      control.get('weight')?.setValue(item.weight);\n      control.get('cost')?.setValue(item.cost);\n    });\n  }\n  submitForm() {\n    if (this.packingForm.valid) {\n      const formValue = this.packingForm.value;\n      console.log(formValue);\n    }\n  }\n}\nPackingFormComponent.ɵfac = function PackingFormComponent_Factory(t) {\n  return new (t || PackingFormComponent)(i0.ɵɵdirectiveInject(i1.ParcelDataService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nPackingFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PackingFormComponent,\n  selectors: [[\"app-packing-form\"]],\n  decls: 12,\n  vars: 3,\n  consts: [[1, \"container-fluid\"], [1, \"row\"], [1, \"col-12\"], [1, \"d-flex\", \"justify-content-center\", \"mt-5\"], [\"src\", \"../../assets/logo.png\", \"alt\", \"App Logo\", 1, \"app-logo\"], [1, \"p-5\", \"packingForm\", 3, \"formGroup\", \"ngSubmit\"], [3, \"ngModel\", \"ngModelChange\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n  template: function PackingFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n      i0.ɵɵelement(4, \"img\", 4);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(5, \"div\", 1)(6, \"div\", 2)(7, \"form\", 5);\n      i0.ɵɵlistener(\"ngSubmit\", function PackingFormComponent_Template_form_ngSubmit_7_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵelementStart(8, \"select\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function PackingFormComponent_Template_select_ngModelChange_8_listener($event) {\n        return ctx.selectedWeight = $event;\n      });\n      i0.ɵɵelementStart(9, \"option\", 7);\n      i0.ɵɵtext(10, \"Select a weight\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, PackingFormComponent_option_11_Template, 2, 2, \"option\", 8);\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"formGroup\", ctx.packingForm);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectedWeight);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.weights);\n    }\n  },\n  dependencies: [i3.NgForOf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.NgModel],\n  styles: [\".item-group[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.btn-danger[_ngcontent-%COMP%] {\\r\\n  margin-left: 10px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9wYWNraW5nLWZvcm0vcGFja2luZy1mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQiIsInNvdXJjZXNDb250ZW50IjpbIi5pdGVtLWdyb3VwIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxufVxyXG5cclxuLmJ0bi1kYW5nZXIge1xyXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","PackingFormComponent","constructor","parcelDataService","formBuilder","packingForm","group","weightLimit","items","array","ngOnInit","fetchData","fetchParcels","subscribe","parcels","populateSampleParcelWeights","populateItemsByWeight","error","console","sampleParcelWeights","map","parcel","sampleParcelWeight","weight","itemsByWeight","get","addItem","itemGroup","index","cost","push","removeItem","removeAt","onWeightSelected","selectedWeight","value","selectedItems","controls","forEach","control","setValue","item","at","submitForm","valid","formValue","log","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\components\\packing-form\\packing-form.component.html","C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\components\\packing-form\\packing-form.component.ts"],"sourcesContent":["<div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n        <div class=\"col-12\">\r\n            <div class=\"d-flex justify-content-center mt-5\">\r\n                <img src=\"../../assets/logo.png\" alt=\"App Logo\" class=\"app-logo\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-12\">\r\n            <form class=\"p-5 packingForm\" [formGroup]=\"packingForm\" (ngSubmit)=\"submitForm()\">\r\n              <select [(ngModel)]=\"selectedWeight\">\r\n  <option value=\"\">Select a weight</option>\r\n  <option *ngFor=\"let weight of weights\" [value]=\"weight\">{{ weight }}</option>\r\n</select>\r\n\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, FormArray, FormBuilder } from '@angular/forms';\r\nimport { Parcel } from '../../interfaces/parcel.interface';\r\nimport { Item } from '../../interfaces/item.interface';\r\nimport { ParcelDataService } from '../../services/parcel-data-service';\r\n\r\n@Component({\r\n  selector: 'app-packing-form',\r\n  templateUrl: './packing-form.component.html',\r\n  styleUrls: ['./packing-form.component.css']\r\n})\r\nexport class PackingFormComponent implements OnInit {\r\n  public parcels: Parcel[] = [];\r\n  public packingForm: FormGroup;\r\n  public sampleParcelWeights: number[] = []; // Sample parcel weights fetched from the API\r\n  public itemsByWeight: { [weight: number]: Item[] } = {}; // Items grouped by weight\r\n\r\n  constructor(\r\n    private parcelDataService: ParcelDataService,\r\n    private formBuilder: FormBuilder\r\n  ) {\r\n    this.packingForm = this.formBuilder.group({\r\n      weightLimit: [''],\r\n      items: this.formBuilder.array([])\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.fetchData();\r\n  }\r\n\r\n  private fetchData(): void {\r\n    this.parcelDataService.fetchParcels().subscribe(\r\n      (parcels: Parcel[]) => {\r\n        this.parcels = parcels;\r\n        this.populateSampleParcelWeights();\r\n        this.populateItemsByWeight();\r\n      },\r\n      (error: any) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  private populateSampleParcelWeights(): void {\r\n    this.sampleParcelWeights = this.parcels.map((parcel) => parcel.sampleParcelWeight);\r\n  }\r\n\r\n  private populateItemsByWeight(): void {\r\n    for (const parcel of this.parcels) {\r\n      const weight = parcel.sampleParcelWeight;\r\n      if (!this.itemsByWeight[weight]) {\r\n        this.itemsByWeight[weight] = parcel.items;\r\n      }\r\n    }\r\n  }\r\n\r\n  get items(): FormArray {\r\n    return this.packingForm.get('items') as FormArray;\r\n  }\r\n\r\n  addItem(): void {\r\n    const itemGroup = this.formBuilder.group({\r\n      index: [''],\r\n      weight: [''],\r\n      cost: ['']\r\n    });\r\n    this.items.push(itemGroup);\r\n  }\r\n\r\n  removeItem(index: number): void {\r\n    this.items.removeAt(index);\r\n  }\r\n\r\n  onWeightSelected(): void {\r\n    const selectedWeight = this.packingForm.get('weightLimit')?.value;\r\n    const selectedItems = this.itemsByWeight[selectedWeight] || [];\r\n    this.items.controls.forEach((control) => {\r\n      control.get('index')?.setValue(null);\r\n    });\r\n    selectedItems.forEach((item, index) => {\r\n      const control = this.items.at(index);\r\n      control.get('index')?.setValue(item.index);\r\n      control.get('weight')?.setValue(item.weight);\r\n      control.get('cost')?.setValue(item.cost);\r\n    });\r\n  }\r\n\r\n  submitForm(): void {\r\n    if (this.packingForm.valid) {\r\n      const formValue = this.packingForm.value;\r\n      console.log(formValue);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}