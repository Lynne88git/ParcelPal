{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nexport class PackingFormComponent {\n  constructor(fb, http) {\n    this.fb = fb;\n    this.http = http;\n    this.packingForm = new FormGroup({});\n    this.sampleWeights = [];\n    this.allItems = [];\n    this.availableItems = [];\n  }\n  ngOnInit() {\n    this.initForm();\n    this.loadSampleWeights();\n    this.loadAvailableItems();\n    const filePath = 'assets/input.txt';\n    this.http.get(filePath, {\n      responseType: 'text'\n    }).subscribe(response => {\n      this.allItems = this.extractItems(response); // Load all items\n    }, error => {\n      console.error(error);\n    });\n  }\n  initForm() {\n    this.packingForm = this.fb.group({\n      weightLimit: ['', [Validators.required, Validators.max(100)]],\n      items: this.fb.array([])\n    });\n    this.packingForm.get('weightLimit')?.valueChanges.subscribe(() => {\n      this.filterItemsByWeight();\n    });\n  }\n  get items() {\n    return this.packingForm.get('items');\n  }\n  addItem() {\n    const itemGroup = this.fb.group({\n      index: [''],\n      weightLimit: [''] // Add the weightLimit form control\n    });\n\n    this.items.push(itemGroup);\n  }\n  removeItem(index) {\n    this.items.removeAt(index);\n  }\n  submitForm() {\n    if (this.packingForm.valid) {\n      const formValue = this.packingForm.value;\n      console.log(formValue);\n    }\n  }\n  loadSampleWeights() {\n    const filePath = 'assets/input.txt';\n    this.http.get(filePath, {\n      responseType: 'text'\n    }).subscribe(response => {\n      const weights = this.extractWeights(response);\n      this.sampleWeights = weights; // Assign the sample weights from the API response\n      this.filterItemsByWeight(); // Filter items based on the selected weight\n    }, error => {\n      console.error(error);\n    });\n  }\n  extractWeights(data) {\n    const lines = data.split('\\n');\n    const weights = [];\n    for (const line of lines) {\n      const parts = line.split(':');\n      if (parts.length === 2) {\n        const weight = parseFloat(parts[0].trim());\n        if (!isNaN(weight)) {\n          weights.push(weight);\n        }\n      }\n    }\n    return weights;\n  }\n  loadAvailableItems() {\n    // Load the available items from API or any other source\n    // For demo purposes, let's use a static list\n    this.availableItems = [{\n      index: 0,\n      name: 'Item 1',\n      weight: 1.5,\n      cost: 10\n    }, {\n      index: 1,\n      name: 'Item 2',\n      weight: 2.0,\n      cost: 15\n    }, {\n      index: 2,\n      name: 'Item 3',\n      weight: 0.5,\n      cost: 5\n    }];\n  }\n  extractItems(data) {\n    const lines = data.split('\\n');\n    const items = [];\n    for (const line of lines) {\n      const colonIndex = line.indexOf(':');\n      if (colonIndex !== -1) {\n        const weight = parseFloat(line.substring(0, colonIndex).trim());\n        const itemData = line.substring(colonIndex + 1).split('(');\n        for (const item of itemData) {\n          const itemInfo = item.replace(/[\\)\\s]/g, '').split(',');\n          if (itemInfo.length === 3) {\n            const id = parseInt(itemInfo[0]);\n            const itemWeight = parseFloat(itemInfo[1]);\n            const cost = parseFloat(itemInfo[2].substring(1));\n            items.push({\n              id,\n              weight: itemWeight,\n              cost\n            });\n          }\n        }\n      }\n    }\n    return items;\n  }\n  onItemSelection(event) {\n    const selectedIndex = parseInt(event.target.value);\n    const selectedWeight = parseFloat(this.packingForm.get('weightLimit')?.value);\n    const selectedItems = this.availableItems.filter(item => item.weight <= selectedWeight);\n    const selectedItem = selectedItems.find(item => item.index === selectedIndex);\n    if (selectedItem) {\n      this.packingForm.get('weight')?.setValue(selectedItem.weight);\n      this.packingForm.get('cost')?.setValue(selectedItem.cost);\n    }\n  }\n  filterItemsByWeight() {\n    const selectedWeight = parseFloat(this.packingForm.get('weightLimit')?.value);\n    console.log('Filtering items by weight...');\n    console.log('Selected weight:', selectedWeight);\n    // Clear existing items\n    while (this.items.length !== 0) {\n      this.items.removeAt(0);\n    }\n    // Filter items based on selected weight\n    this.availableItems = this.allItems.filter(item => item.weight <= selectedWeight);\n    console.log('Filtered items:', this.availableItems);\n    // Log available items for each sample parcel\n    this.sampleWeights.forEach((weight, index) => {\n      console.log(`Processing sample parcel ${index + 1}...`);\n      const itemsForParcel = this.loadAllItems(weight);\n      console.log(`Available items for sample parcel ${index + 1}:`, itemsForParcel);\n    });\n  }\n  loadAllItems(weight) {\n    const itemsForParcel = [];\n    let remainingWeight = weight;\n    console.log('Available items:', this.availableItems);\n    // Iterate over available items\n    for (const item of this.availableItems) {\n      console.log('Item weight:', item.weight);\n      console.log('Remaining weight:', remainingWeight);\n      console.log('Item weight:', item.weight);\n      if (item.weight <= remainingWeight) {\n        itemsForParcel.push(item);\n        remainingWeight -= item.weight;\n      }\n    }\n    console.log(`Items for weight ${weight}:`, itemsForParcel); // Log the items for the current weight\n    return itemsForParcel;\n  }\n}\nPackingFormComponent.ɵfac = function PackingFormComponent_Factory(t) {\n  return new (t || PackingFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient));\n};\nPackingFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PackingFormComponent,\n  selectors: [[\"app-packing-form\"]],\n  decls: 49,\n  vars: 2,\n  consts: [[1, \"container-fluid\"], [1, \"row\"], [1, \"col-12\"], [1, \"d-flex\", \"justify-content-center\", \"mt-5\"], [\"src\", \"../../assets/logo.png\", \"alt\", \"App Logo\", 1, \"app-logo\"], [1, \"p-5\", \"packingForm\", 3, \"formGroup\", \"ngSubmit\"], [1, \"text-light\", \"mb-4\"], [1, \"form-group\"], [\"for\", \"weight\", 1, \"text-light\", \"my-2\"], [\"id\", \"weight\", \"formControlName\", \"weightLimit\", 1, \"form-control\"], [\"for\", \"items\", 1, \"text-light\", \"mt-2\"], [\"formArrayName\", \"items\"], [1, \"item-group\"], [1, \"form-row\"], [1, \"col\"], [\"for\", \"selectedItem\"], [\"id\", \"weightLimit\", \"formControlName\", \"weightLimit\", 1, \"form-control\"], [\"value\", \"\"], [1, \"text-light\"], [\"type\", \"number\", \"formControlName\", \"weight\", \"placeholder\", \"Weight\", 1, \"form-control\"], [1, \"input-group\"], [1, \"input-group-prepend\"], [1, \"input-group-text\"], [\"type\", \"number\", \"formControlName\", \"cost\", \"placeholder\", \"Cost\", 1, \"form-control\"], [\"type\", \"button\", 1, \"btn\", \"btn-yellow\"], [\"type\", \"button\", 1, \"btn\", \"btn-yellow\", \"py-2\", \"my-2\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-yellow\", 3, \"disabled\"]],\n  template: function PackingFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n      i0.ɵɵelement(4, \"img\", 4);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(5, \"div\", 1)(6, \"div\", 2)(7, \"form\", 5);\n      i0.ɵɵlistener(\"ngSubmit\", function PackingFormComponent_Template_form_ngSubmit_7_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵelementStart(8, \"h2\", 6);\n      i0.ɵɵtext(9, \"Enter Parcel Details\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 7)(11, \"label\", 8);\n      i0.ɵɵtext(12, \"Weight\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"select\", 9)(14, \"option\");\n      i0.ɵɵtext(15, \"value: weightLimit\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(16, \"div\", 7)(17, \"label\", 10);\n      i0.ɵɵtext(18, \"Items:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"div\", 11)(20, \"div\", 12)(21, \"div\", 13)(22, \"div\", 14)(23, \"div\", 7)(24, \"label\", 15);\n      i0.ɵɵtext(25, \"Select Item:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"select\", 16)(27, \"option\", 17);\n      i0.ɵɵtext(28, \"-- Select Item --\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(29, \"option\");\n      i0.ɵɵtext(30, \"item.name\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(31, \"div\", 14)(32, \"label\", 18);\n      i0.ɵɵtext(33, \"Weight\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(34, \"input\", 19);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(35, \"div\", 14)(36, \"label\", 18);\n      i0.ɵɵtext(37, \"Cost\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(38, \"div\", 20)(39, \"div\", 21)(40, \"span\", 22);\n      i0.ɵɵtext(41, \"\\u20AC\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(42, \"input\", 23);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(43, \"button\", 24);\n      i0.ɵɵtext(44, \"Remove Item\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(45, \"button\", 25);\n      i0.ɵɵlistener(\"click\", function PackingFormComponent_Template_button_click_45_listener() {\n        return ctx.addItem();\n      });\n      i0.ɵɵtext(46, \"Add Item\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(47, \"button\", 26);\n      i0.ɵɵtext(48, \"Submit\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"formGroup\", ctx.packingForm);\n      i0.ɵɵadvance(40);\n      i0.ɵɵproperty(\"disabled\", !ctx.packingForm.valid);\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormArrayName],\n  styles: [\".item-group[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.btn-danger[_ngcontent-%COMP%] {\\r\\n  margin-left: 10px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFja2luZy1mb3JtL3BhY2tpbmctZm9ybS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyIuaXRlbS1ncm91cCB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbn1cclxuXHJcbi5idG4tZGFuZ2VyIHtcclxuICBtYXJnaW4tbGVmdDogMTBweDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","Validators","PackingFormComponent","constructor","fb","http","ngOnInit","initForm","loadSampleWeights","loadAvailableItems","filePath","get","responseType","subscribe","response","allItems","extractItems","error","console","packingForm","group","weightLimit","required","max","items","array","valueChanges","filterItemsByWeight","addItem","itemGroup","index","push","removeItem","removeAt","submitForm","valid","formValue","value","log","weights","extractWeights","sampleWeights","data","lines","split","line","parts","length","weight","parseFloat","trim","isNaN","availableItems","name","cost","colonIndex","indexOf","substring","itemData","item","itemInfo","replace","id","parseInt","itemWeight","onItemSelection","event","selectedIndex","target","selectedWeight","selectedItems","filter","selectedItem","find","setValue","forEach","itemsForParcel","loadAllItems","remainingWeight","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\packing-form\\packing-form.component.ts","C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\packing-form\\packing-form.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-packing-form',\r\n  templateUrl: './packing-form.component.html',\r\n  styleUrls: ['./packing-form.component.css']\r\n})\r\nexport class PackingFormComponent implements OnInit {\r\n  packingForm: FormGroup = new FormGroup({});\r\n  sampleWeights: number[] = [];\r\n  allItems: any[] = [];\r\n  availableItems: any[] = [];\r\n\r\n  constructor(private fb: FormBuilder, private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    this.loadSampleWeights();\r\n    this.loadAvailableItems();\r\n    const filePath = 'assets/input.txt';\r\n    this.http.get(filePath, { responseType: 'text' }).subscribe(\r\n      (response) => {\r\n        this.allItems = this.extractItems(response); // Load all items\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  initForm(): void {\r\n    this.packingForm = this.fb.group({\r\n      weightLimit: ['', [Validators.required, Validators.max(100)]],\r\n      items: this.fb.array([])\r\n    });\r\n\r\n    this.packingForm.get('weightLimit')?.valueChanges.subscribe(() => {\r\n      this.filterItemsByWeight();\r\n    });\r\n  }\r\n\r\n  get items(): FormArray {\r\n    return this.packingForm.get('items') as FormArray;\r\n  }\r\n\r\n  addItem(): void {\r\n    const itemGroup = this.fb.group({\r\n      index: [''],\r\n      weightLimit: [''] // Add the weightLimit form control\r\n    });\r\n\r\n    this.items.push(itemGroup);\r\n  }\r\n\r\n  removeItem(index: number): void {\r\n    this.items.removeAt(index);\r\n  }\r\n\r\n  submitForm(): void {\r\n    if (this.packingForm.valid) {\r\n      const formValue = this.packingForm.value;\r\n      console.log(formValue);\r\n    }\r\n  }\r\n\r\n  loadSampleWeights(): void {\r\n    const filePath = 'assets/input.txt';\r\n    this.http.get(filePath, { responseType: 'text' }).subscribe(\r\n      (response) => {\r\n        const weights = this.extractWeights(response);\r\n        this.sampleWeights = weights; // Assign the sample weights from the API response\r\n        this.filterItemsByWeight(); // Filter items based on the selected weight\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  extractWeights(data: string): number[] {\r\n    const lines = data.split('\\n');\r\n    const weights: number[] = [];\r\n    for (const line of lines) {\r\n      const parts = line.split(':');\r\n      if (parts.length === 2) {\r\n        const weight = parseFloat(parts[0].trim());\r\n        if (!isNaN(weight)) {\r\n          weights.push(weight);\r\n        }\r\n      }\r\n    }\r\n    return weights;\r\n  }\r\n\r\n  loadAvailableItems(): void {\r\n    // Load the available items from API or any other source\r\n    // For demo purposes, let's use a static list\r\n    this.availableItems = [\r\n      { index: 0, name: 'Item 1', weight: 1.5, cost: 10 },\r\n      { index: 1, name: 'Item 2', weight: 2.0, cost: 15 },\r\n      { index: 2, name: 'Item 3', weight: 0.5, cost: 5 }\r\n    ];\r\n  }\r\n\r\n  extractItems(data: string): any[] {\r\n    const lines = data.split('\\n');\r\n    const items: any[] = [];\r\n\r\n    for (const line of lines) {\r\n      const colonIndex = line.indexOf(':');\r\n      if (colonIndex !== -1) {\r\n        const weight = parseFloat(line.substring(0, colonIndex).trim());\r\n        const itemData = line.substring(colonIndex + 1).split('(');\r\n\r\n        for (const item of itemData) {\r\n          const itemInfo = item.replace(/[\\)\\s]/g, '').split(',');\r\n          if (itemInfo.length === 3) {\r\n            const id = parseInt(itemInfo[0]);\r\n            const itemWeight = parseFloat(itemInfo[1]);\r\n            const cost = parseFloat(itemInfo[2].substring(1));\r\n\r\n            items.push({\r\n              id,\r\n              weight: itemWeight,\r\n              cost\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  onItemSelection(event: any): void {\r\n    const selectedIndex = parseInt(event.target.value);\r\n    const selectedWeight = parseFloat(this.packingForm.get('weightLimit')?.value);\r\n    const selectedItems = this.availableItems.filter(item => item.weight <= selectedWeight);\r\n    const selectedItem = selectedItems.find(item => item.index === selectedIndex);\r\n    if (selectedItem) {\r\n      this.packingForm.get('weight')?.setValue(selectedItem.weight);\r\n      this.packingForm.get('cost')?.setValue(selectedItem.cost);\r\n    }\r\n  }\r\n\r\n\r\n  filterItemsByWeight(): void {\r\n    const selectedWeight = parseFloat(this.packingForm.get('weightLimit')?.value);\r\n    console.log('Filtering items by weight...');\r\n    console.log('Selected weight:', selectedWeight);\r\n\r\n    // Clear existing items\r\n    while (this.items.length !== 0) {\r\n      this.items.removeAt(0);\r\n    }\r\n\r\n    // Filter items based on selected weight\r\n    this.availableItems = this.allItems.filter(item => item.weight <= selectedWeight);\r\n    console.log('Filtered items:', this.availableItems);\r\n\r\n    // Log available items for each sample parcel\r\n    this.sampleWeights.forEach((weight, index) => {\r\n      console.log(`Processing sample parcel ${index + 1}...`);\r\n      const itemsForParcel = this.loadAllItems(weight);\r\n      console.log(`Available items for sample parcel ${index + 1}:`, itemsForParcel);\r\n    });\r\n  }\r\n\r\n  loadAllItems(weight: number): any[] {\r\n    const itemsForParcel: any[] = [];\r\n    let remainingWeight = weight;\r\n    console.log('Available items:', this.availableItems);\r\n\r\n    // Iterate over available items\r\n    for (const item of this.availableItems) {\r\n      console.log('Item weight:', item.weight);\r\n      console.log('Remaining weight:', remainingWeight);\r\n      console.log('Item weight:', item.weight);\r\n      if (item.weight <= remainingWeight) {\r\n        itemsForParcel.push(item);\r\n        remainingWeight -= item.weight;\r\n      }\r\n    }\r\n    console.log(`Items for weight ${weight}:`, itemsForParcel); // Log the items for the current weight\r\n    return itemsForParcel;\r\n  }\r\n}\r\n","<div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n        <div class=\"col-12\">\r\n            <div class=\"d-flex justify-content-center mt-5\">\r\n                <img src=\"../../assets/logo.png\" alt=\"App Logo\" class=\"app-logo\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-12\">\r\n            <form class=\"p-5 packingForm\" [formGroup]=\"packingForm\" (ngSubmit)=\"submitForm()\">\r\n                <h2 class=\"text-light mb-4\">Enter Parcel Details</h2>\r\n\r\n                <div class=\"form-group\">\r\n                    <label for=\"weight\" class=\"text-light my-2\">Weight</label>\r\n                    <select class=\"form-control\" id=\"weight\" formControlName=\"weightLimit\">\r\n                        <option>value: weightLimit</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label for=\"items\" class=\"text-light mt-2\">Items:</label>\r\n                    <div formArrayName=\"items\">\r\n                        <div class=\"item-group\">\r\n                            <div class=\"form-row\">\r\n                                <div class=\"col\">\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"selectedItem\">Select Item:</label>\r\n                                        <select class=\"form-control\" id=\"weightLimit\" formControlName=\"weightLimit\">\r\n                                            <option value=\"\">-- Select Item --</option>\r\n                                            <option>item.name</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col\">\r\n                                    <label class=\"text-light\">Weight</label>\r\n                                    <input type=\"number\" formControlName=\"weight\" class=\"form-control\" placeholder=\"Weight\">\r\n                                </div>\r\n                                <div class=\"col\">\r\n                                    <label class=\"text-light\">Cost</label>\r\n                                    <div class=\"input-group\">\r\n                                        <div class=\"input-group-prepend\">\r\n                                            <span class=\"input-group-text\">€</span>\r\n                                        </div>\r\n                                        <input type=\"number\" formControlName=\"cost\" class=\"form-control\" placeholder=\"Cost\">\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <button type=\"button\" class=\"btn btn-yellow\">Remove Item</button>\r\n                        </div>\r\n                    </div>\r\n                    <button type=\"button\" (click)=\"addItem()\"class=\"btn btn-yellow py-2 my-2\">Add Item</button>\r\n                </div>\r\n                <button type=\"submit\" [disabled]=\"!packingForm.valid\" class=\"btn btn-yellow\">Submit</button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}