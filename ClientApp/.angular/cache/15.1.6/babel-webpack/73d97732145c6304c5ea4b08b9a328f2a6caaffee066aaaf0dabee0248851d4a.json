{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ParcelDataService {\n  constructor(http) {\n    this.http = http;\n    this.parcels = [];\n    this.APIUrl = 'https://gist.githubusercontent.com/Lynne88git/552c061f4ebe867b70f6bc2376653b02/raw/876ca05861ce3bed421e0970b24563dfdfeb7ca5/input.txt';\n  }\n  ngOnInit() {\n    this.fetchParcels();\n  }\n  getWeights() {\n    return this.http.get(this.APIUrl);\n  }\n  fetchParcels() {\n    this.http.get(this.APIUrl, {\n      responseType: 'text'\n    }).subscribe(data => {\n      this.parseParcels(data);\n    }, error => {\n      console.error(error);\n    });\n  }\n  parseParcels(data) {\n    const lines = data.split('\\n');\n    for (const line of lines) {\n      const [idStr, itemsStr] = line.split(':');\n      const id = parseInt(idStr.trim());\n      const items = itemsStr.trim().split('(').slice(1).filter(item => item.trim() !== '').map(item => {\n        const [index, name, weightStr, costStr] = item.replace(')', '').split(',').map(value => value.trim());\n        const weight = parseFloat(weightStr);\n        const cost = parseFloat(costStr.replace('€', ''));\n        return {\n          index: index,\n          name: name,\n          weight: weight,\n          cost: cost\n        };\n      });\n      console.log(`Items for Parcel ID ${id}:`);\n      for (const item of items) {\n        console.log(`Index: ${item.index}`);\n        console.log(`Name: ${item.name}`);\n        console.log(`Weight: ${item.weight}`);\n        console.log(`Cost: ${item.cost}`);\n        console.log('   ');\n      }\n    }\n  }\n}\nParcelDataService.ɵfac = function ParcelDataService_Factory(t) {\n  return new (t || ParcelDataService)(i0.ɵɵinject(i1.HttpClient));\n};\nParcelDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ParcelDataService,\n  factory: ParcelDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAUA,OAAM,MAAOA,iBAAiB;EAI5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHjB,YAAO,GAAa,EAAE;IACrB,WAAM,GAAG,uIAAuI;EAEhH;EAExCC,QAAQ;IACN,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAC,UAAU;IACR,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAW,IAAI,CAACC,MAAM,CAAC;EAC7C;EAEQH,YAAY;IAClB,IAAI,CAACF,IAAI,CAACI,GAAG,CAAC,IAAI,CAACC,MAAM,EAAE;MAAEC,YAAY,EAAE;IAAM,CAAE,CAAC,CAACC,SAAS,CAC3DC,IAAY,IAAI;MACf,IAAI,CAACC,YAAY,CAACD,IAAI,CAAC;IACzB,CAAC,EACAE,KAAU,IAAI;MACbC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CACF;EACH;EAEQD,YAAY,CAACD,IAAY;IAC/B,MAAMI,KAAK,GAAGJ,IAAI,CAACK,KAAK,CAAC,IAAI,CAAC;IAC9B,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;MACxB,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGF,IAAI,CAACD,KAAK,CAAC,GAAG,CAAC;MACzC,MAAMI,EAAE,GAAGC,QAAQ,CAACH,KAAK,CAACI,IAAI,EAAE,CAAC;MACjC,MAAMC,KAAK,GAAGJ,QAAQ,CACnBG,IAAI,EAAE,CACNN,KAAK,CAAC,GAAG,CAAC,CACVQ,KAAK,CAAC,CAAC,CAAC,CACRC,MAAM,CAAEC,IAAY,IAAKA,IAAI,CAACJ,IAAI,EAAE,KAAK,EAAE,CAAC,CAC5CK,GAAG,CAAED,IAAY,IAAI;QACpB,MAAM,CAACE,KAAK,EAAEC,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAC,GAAGL,IAAI,CAC3CM,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAChBhB,KAAK,CAAC,GAAG,CAAC,CACVW,GAAG,CAAEM,KAAa,IAAKA,KAAK,CAACX,IAAI,EAAE,CAAC;QACvC,MAAMY,MAAM,GAAGC,UAAU,CAACL,SAAS,CAAC;QACpC,MAAMM,IAAI,GAAGD,UAAU,CAACJ,OAAO,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACjD,OAAO;UACLJ,KAAK,EAAEA,KAAK;UACZC,IAAI,EAAEA,IAAI;UACVK,MAAM,EAAEA,MAAM;UACdE,IAAI,EAAEA;SACC;MACX,CAAC,CAAC;MACJtB,OAAO,CAACuB,GAAG,CAAC,uBAAuBjB,EAAE,GAAG,CAAC;MACzC,KAAK,MAAMM,IAAI,IAAIH,KAAK,EAAE;QACxBT,OAAO,CAACuB,GAAG,CAAC,UAAUX,IAAI,CAACE,KAAK,EAAE,CAAC;QACnCd,OAAO,CAACuB,GAAG,CAAC,SAASX,IAAI,CAACG,IAAI,EAAE,CAAC;QACjCf,OAAO,CAACuB,GAAG,CAAC,WAAWX,IAAI,CAACQ,MAAM,EAAE,CAAC;QACrCpB,OAAO,CAACuB,GAAG,CAAC,SAASX,IAAI,CAACU,IAAI,EAAE,CAAC;QACjCtB,OAAO,CAACuB,GAAG,CAAC,KAAK,CAAC;;;EAGxB;;AA1DWpC,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAqC,SAAjBrC,iBAAiB;EAAAsC,YAFhB;AAAM","names":["ParcelDataService","constructor","http","ngOnInit","fetchParcels","getWeights","get","APIUrl","responseType","subscribe","data","parseParcels","error","console","lines","split","line","idStr","itemsStr","id","parseInt","trim","items","slice","filter","item","map","index","name","weightStr","costStr","replace","value","weight","parseFloat","cost","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\services\\parcel-data-service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs'\r\nimport { Item } from '../interfaces/item.interface';\r\nimport { Parcel } from '../interfaces/parcel.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ParcelDataService {\r\n  public parcels: Parcel[] = [];\r\n  private APIUrl = 'https://gist.githubusercontent.com/Lynne88git/552c061f4ebe867b70f6bc2376653b02/raw/876ca05861ce3bed421e0970b24563dfdfeb7ca5/input.txt';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n    this.fetchParcels();\r\n  }\r\n\r\n  getWeights(): Observable<string[]> {\r\n    return this.http.get<string[]>(this.APIUrl);\r\n  }\r\n\r\n  private fetchParcels(): void {\r\n    this.http.get(this.APIUrl, { responseType: 'text' }).subscribe(\r\n      (data: string) => {\r\n        this.parseParcels(data);\r\n      },\r\n      (error: any) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  private parseParcels(data: string): void {\r\n    const lines = data.split('\\n');\r\n    for (const line of lines) {\r\n      const [idStr, itemsStr] = line.split(':');\r\n      const id = parseInt(idStr.trim());\r\n      const items = itemsStr\r\n        .trim()\r\n        .split('(')\r\n        .slice(1)\r\n        .filter((item: string) => item.trim() !== '')\r\n        .map((item: string) => {\r\n          const [index, name, weightStr, costStr] = item\r\n            .replace(')', '')\r\n            .split(',')\r\n            .map((value: string) => value.trim());\r\n          const weight = parseFloat(weightStr);\r\n          const cost = parseFloat(costStr.replace('€', ''));\r\n          return {\r\n            index: index,\r\n            name: name,\r\n            weight: weight,\r\n            cost: cost\r\n          } as Item;\r\n        });\r\n      console.log(`Items for Parcel ID ${id}:`);\r\n      for (const item of items) {\r\n        console.log(`Index: ${item.index}`);\r\n        console.log(`Name: ${item.name}`);\r\n        console.log(`Weight: ${item.weight}`);\r\n        console.log(`Cost: ${item.cost}`);\r\n        console.log('   ');\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}