{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet PackingFormComponent = class PackingFormComponent {\n  constructor(parcelDataService, formBuilder) {\n    this.parcelDataService = parcelDataService;\n    this.formBuilder = formBuilder;\n    this.parcels = [];\n    this.sampleParcelWeights = []; // Sample parcel weights fetched from the API\n    this.itemsByWeight = {}; // Items grouped by weight\n    this.packingForm = this.formBuilder.group({\n      weightLimit: [''],\n      items: this.formBuilder.array([])\n    });\n  }\n  ngOnInit() {\n    this.fetchData();\n  }\n  fetchData() {\n    this.parcelDataService.fetchParcels().subscribe(parcels => {\n      this.parcels = parcels;\n      this.populateSampleParcelWeights();\n      this.populateItemsByWeight();\n    }, error => {\n      console.error(error);\n    });\n  }\n  populateSampleParcelWeights() {\n    this.sampleParcelWeights = this.parcels.map(parcel => parcel.sampleParcelWeight);\n  }\n  populateItemsByWeight() {\n    for (const parcel of this.parcels) {\n      const weight = parcel.sampleParcelWeight;\n      if (!this.itemsByWeight[weight]) {\n        this.itemsByWeight[weight] = parcel.items;\n      }\n    }\n  }\n  get items() {\n    return this.packingForm.get('items');\n  }\n  addItem() {\n    const itemGroup = this.formBuilder.group({\n      index: [''],\n      weight: [''],\n      cost: ['']\n    });\n    this.items.push(itemGroup);\n  }\n  removeItem(index) {\n    this.items.removeAt(index);\n  }\n  onWeightSelected() {\n    const selectedWeight = this.packingForm.get('weightLimit')?.value;\n    const selectedItems = this.itemsByWeight[selectedWeight] || [];\n    this.items.controls.forEach(control => {\n      control.get('index')?.setValue(null);\n    });\n    selectedItems.forEach((item, index) => {\n      const control = this.items.at(index);\n      control.get('index')?.setValue(item.index);\n      control.get('weight')?.setValue(item.weight);\n      control.get('cost')?.setValue(item.cost);\n    });\n  }\n  submitForm() {\n    if (this.packingForm.valid) {\n      const formValue = this.packingForm.value;\n      console.log(formValue);\n    }\n  }\n};\nPackingFormComponent = __decorate([Component({\n  selector: 'app-fetch-parcel-data',\n  templateUrl: './fetch-parcel-data.component.html',\n  styleUrls: ['./fetch-parcel-data.component.css']\n})], PackingFormComponent);\nexport { PackingFormComponent };","map":{"version":3,"mappings":"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","names":["Component","PackingFormComponent","constructor","parcelDataService","formBuilder","packingForm","group","weightLimit","items","array","ngOnInit","fetchData","fetchParcels","subscribe","parcels","populateSampleParcelWeights","populateItemsByWeight","error","console","sampleParcelWeights","map","parcel","sampleParcelWeight","weight","itemsByWeight","get","addItem","itemGroup","index","cost","push","removeItem","removeAt","onWeightSelected","selectedWeight","value","selectedItems","controls","forEach","control","setValue","item","at","submitForm","valid","formValue","log","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\components\\packing-form\\packing-form.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, FormArray, FormBuilder } from '@angular/forms';\r\nimport { Parcel } from '../../interfaces/parcel.interface';\r\nimport { Item } from '../../interfaces/item.interface';\r\nimport { ParcelDataService } from '../../services/parcel-data-service';\r\n\r\n@Component({\r\n  selector: 'app-fetch-parcel-data',\r\n  templateUrl: './fetch-parcel-data.component.html',\r\n  styleUrls: ['./fetch-parcel-data.component.css']\r\n})\r\nexport class PackingFormComponent implements OnInit {\r\n  public parcels: Parcel[] = [];\r\n  public packingForm: FormGroup;\r\n  public sampleParcelWeights: number[] = []; // Sample parcel weights fetched from the API\r\n  public itemsByWeight: { [weight: number]: Item[] } = {}; // Items grouped by weight\r\n\r\n  constructor(\r\n    private parcelDataService: ParcelDataService,\r\n    private formBuilder: FormBuilder\r\n  ) {\r\n    this.packingForm = this.formBuilder.group({\r\n      weightLimit: [''],\r\n      items: this.formBuilder.array([])\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.fetchData();\r\n  }\r\n\r\n  private fetchData(): void {\r\n    this.parcelDataService.fetchParcels().subscribe(\r\n      (parcels: Parcel[]) => {\r\n        this.parcels = parcels;\r\n        this.populateSampleParcelWeights();\r\n        this.populateItemsByWeight();\r\n      },\r\n      (error: any) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  private populateSampleParcelWeights(): void {\r\n    this.sampleParcelWeights = this.parcels.map((parcel) => parcel.sampleParcelWeight);\r\n  }\r\n\r\n  private populateItemsByWeight(): void {\r\n    for (const parcel of this.parcels) {\r\n      const weight = parcel.sampleParcelWeight;\r\n      if (!this.itemsByWeight[weight]) {\r\n        this.itemsByWeight[weight] = parcel.items;\r\n      }\r\n    }\r\n  }\r\n\r\n  get items(): FormArray {\r\n    return this.packingForm.get('items') as FormArray;\r\n  }\r\n\r\n  addItem(): void {\r\n    const itemGroup = this.formBuilder.group({\r\n      index: [''],\r\n      weight: [''],\r\n      cost: ['']\r\n    });\r\n    this.items.push(itemGroup);\r\n  }\r\n\r\n  removeItem(index: number): void {\r\n    this.items.removeAt(index);\r\n  }\r\n\r\n  onWeightSelected(): void {\r\n    const selectedWeight = this.packingForm.get('weightLimit')?.value;\r\n    const selectedItems = this.itemsByWeight[selectedWeight] || [];\r\n    this.items.controls.forEach((control) => {\r\n      control.get('index')?.setValue(null);\r\n    });\r\n    selectedItems.forEach((item, index) => {\r\n      const control = this.items.at(index);\r\n      control.get('index')?.setValue(item.index);\r\n      control.get('weight')?.setValue(item.weight);\r\n      control.get('cost')?.setValue(item.cost);\r\n    });\r\n  }\r\n\r\n  submitForm(): void {\r\n    if (this.packingForm.valid) {\r\n      const formValue = this.packingForm.value;\r\n      console.log(formValue);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}