{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nlet PackingFormComponent = class PackingFormComponent {\n  constructor(fb, http) {\n    this.fb = fb;\n    this.http = http;\n    this.packingForm = new FormGroup({});\n    this.availableItems = []; // Update this with the items from input.txt\n    this.sampleParcelWeights = []; // Update this with the sample parcel weights from input.txt\n    this.selectedItems = [];\n    this.selectedItem = null; // Update this line to store the selected item\n    this.itemsByWeight = {};\n  }\n  ngOnInit() {\n    this.initForm();\n    const filePath = 'assets/input.txt';\n    this.http.get(filePath, {\n      responseType: 'text'\n    }).subscribe(response => {\n      this.parseInputFile(response); // Parse the input.txt file and update availableItems and sampleParcelWeights arrays\n      this.updateItemsByWeight(); // Update the items dropdown options\n    }, error => {\n      console.error(error);\n    });\n  }\n  initForm() {\n    this.packingForm = this.fb.group({\n      weightLimit: ['', Validators.required],\n      items: this.fb.array([])\n    });\n    this.packingForm.get('weightLimit')?.valueChanges.subscribe(selectedWeight => {\n      this.filterItemsByWeight(selectedWeight);\n    });\n  }\n  get items() {\n    return this.packingForm.get('items');\n  }\n  createItemGroup(item) {\n    return this.fb.group({\n      index: [item.index, Validators.required],\n      weight: [`${item.weight}kg`],\n      cost: [`€${item.cost}`]\n    });\n  }\n  addItem() {\n    const emptyItem = {\n      index: '',\n      name: '',\n      weight: 0,\n      cost: ''\n    };\n    this.items.push(this.createItemGroup(emptyItem));\n  }\n  removeItem(index) {\n    this.items.removeAt(index);\n  }\n  filterItemsByWeight(selectedWeight) {\n    const selectedItems = this.selectedItems.find(item => item.weight === selectedWeight);\n    if (selectedItems) {\n      this.availableItems = selectedItems.items;\n    } else {\n      this.availableItems = [];\n    }\n  }\n  parseInputFile(fileContent) {\n    console.log('File Content:', fileContent); // Log the file content to check if it's correctly loaded\n    const lines = fileContent.split('\\n');\n    for (const line of lines) {\n      if (line.trim() === '') {\n        continue; // Skip empty lines\n      }\n\n      const [weightStr, itemsStr] = line.split(':');\n      console.log('Weight:', weightStr.trim()); // Log the weight string\n      console.log('Items:', itemsStr.trim()); // Log the items string\n      const weight = +weightStr.trim();\n      const items = itemsStr.split('(').slice(1).map(item => {\n        const [index, name, weightStr, costStr] = item.split(',').map(item => item.trim().replace(')', ''));\n        const itemWeight = +weightStr.trim();\n        const itemCost = costStr.trim().replace('€', '');\n        return {\n          index,\n          name,\n          weight: itemWeight,\n          cost: itemCost\n        };\n      });\n      this.sampleParcelWeights.push(weight);\n      this.selectedItems.push({\n        weight,\n        items\n      });\n      // Updating the items dropdown options\n      this.itemsByWeight[weight] = items.map(item => ({\n        value: item.index,\n        label: `${item.index}, ${item.name}`,\n        weight: `${item.weight}kg`,\n        cost: `€${item.cost}`\n      }));\n    }\n  }\n  updateItemsByWeight() {\n    for (const {\n      weight,\n      items\n    } of this.selectedItems) {\n      this.itemsByWeight[weight] = items.map(item => ({\n        value: item.index,\n        label: `${item.index}, ${item.name}`,\n        weight: `${item.weight}kg`,\n        cost: `€${item.cost}`\n      }));\n    }\n  }\n  submitForm() {\n    if (this.packingForm.valid) {\n      const formValue = this.packingForm.value;\n      console.log(formValue);\n    }\n  }\n  onWeightSelected() {\n    const weightLimit = this.packingForm.get('weightLimit')?.value;\n    const selectedItemIndex = this.packingForm.get('items')?.value[this.items.controls.length - 1]?.index;\n    if (weightLimit && selectedItemIndex !== null) {\n      const selectedItems = this.itemsByWeight[weightLimit];\n      const selectedItem = selectedItems.find(item => item.value === selectedItemIndex);\n      if (selectedItem) {\n        this.selectedItem = selectedItem;\n      }\n    }\n  }\n};\nPackingFormComponent = __decorate([Component({\n  selector: 'app-packing-form',\n  templateUrl: './packing-form.component.html',\n  styleUrls: ['./packing-form.component.css']\n})], PackingFormComponent);\nexport { PackingFormComponent };","map":{"version":3,"mappings":"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","names":["Component","FormGroup","Validators","PackingFormComponent","constructor","fb","http","ngOnInit","initForm","filePath","get","responseType","subscribe","response","parseInputFile","updateItemsByWeight","error","console","packingForm","group","weightLimit","required","items","array","valueChanges","selectedWeight","filterItemsByWeight","createItemGroup","item","index","weight","cost","addItem","emptyItem","name","push","removeItem","removeAt","selectedItems","find","availableItems","fileContent","log","lines","split","line","trim","weightStr","itemsStr","slice","map","costStr","replace","itemWeight","itemCost","sampleParcelWeights","itemsByWeight","value","label","submitForm","valid","formValue","onWeightSelected","selectedItemIndex","controls","length","selectedItem","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\packing-form\\packing-form.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Item } from '../interfaces/item.interface';\r\n\r\n@Component({\r\n  selector: 'app-packing-form',\r\n  templateUrl: './packing-form.component.html',\r\n  styleUrls: ['./packing-form.component.css']\r\n})\r\nexport class PackingFormComponent implements OnInit {\r\n  packingForm: FormGroup = new FormGroup({});\r\n  availableItems: Item[] = []; // Update this with the items from input.txt\r\n  sampleParcelWeights: number[] = []; // Update this with the sample parcel weights from input.txt\r\n  selectedItems: { weight: number, items: Item[] }[] = [];\r\n  selectedItem: Item | null = null; // Update this line to store the selected item\r\n  itemsByWeight: Record<number, any[]> = {};\r\n\r\n  constructor(private fb: FormBuilder, private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    const filePath = 'assets/input.txt';\r\n    this.http.get(filePath, { responseType: 'text' }).subscribe(\r\n      (response) => {\r\n        this.parseInputFile(response); // Parse the input.txt file and update availableItems and sampleParcelWeights arrays\r\n        this.updateItemsByWeight(); // Update the items dropdown options\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  initForm(): void {\r\n    this.packingForm = this.fb.group({\r\n      weightLimit: ['', Validators.required],\r\n      items: this.fb.array([])\r\n    });\r\n\r\n    this.packingForm.get('weightLimit')?.valueChanges.subscribe((selectedWeight) => {\r\n      this.filterItemsByWeight(selectedWeight);\r\n    });\r\n  }\r\n\r\n  get items(): FormArray {\r\n    return this.packingForm.get('items') as FormArray;\r\n  }\r\n\r\n  createItemGroup(item: Item): FormGroup {\r\n    return this.fb.group({\r\n      index: [item.index, Validators.required],\r\n      weight: [`${item.weight}kg`],\r\n      cost: [`€${item.cost}`]\r\n    });\r\n  }\r\n\r\n  addItem(): void {\r\n    const emptyItem: Item = { index: '', name: '', weight: 0, cost: '' };\r\n    this.items.push(this.createItemGroup(emptyItem));\r\n  }\r\n\r\n  removeItem(index: number): void {\r\n    this.items.removeAt(index);\r\n  }\r\n\r\n  filterItemsByWeight(selectedWeight: number): void {\r\n    const selectedItems = this.selectedItems.find(item => item.weight === selectedWeight);\r\n    if (selectedItems) {\r\n      this.availableItems = selectedItems.items;\r\n    } else {\r\n      this.availableItems = [];\r\n    }\r\n  }\r\n\r\n  parseInputFile(fileContent: string): void {\r\n    console.log('File Content:', fileContent); // Log the file content to check if it's correctly loaded\r\n    const lines = fileContent.split('\\n');\r\n\r\n    for (const line of lines) {\r\n      if (line.trim() === '') {\r\n        continue; // Skip empty lines\r\n      }\r\n      const [weightStr, itemsStr] = line.split(':');\r\n      console.log('Weight:', weightStr.trim()); // Log the weight string\r\n      console.log('Items:', itemsStr.trim()); // Log the items string\r\n      const weight = +weightStr.trim();\r\n      const items = itemsStr.split('(').slice(1).map((item) => {\r\n        const [index, name, weightStr, costStr] = item.split(',').map((item) => item.trim().replace(')', ''));\r\n        const itemWeight = +weightStr.trim();\r\n        const itemCost = costStr.trim().replace('€', '');\r\n        return { index, name, weight: itemWeight, cost: itemCost } as Item;\r\n      });\r\n\r\n      this.sampleParcelWeights.push(weight);\r\n      this.selectedItems.push({ weight, items });\r\n\r\n      // Updating the items dropdown options\r\n      this.itemsByWeight[weight] = items.map((item) => ({\r\n        value: item.index,\r\n        label: `${item.index}, ${item.name}`,\r\n        weight: `${item.weight}kg`,\r\n        cost: `€${item.cost}`\r\n      }));\r\n    }\r\n  }\r\n\r\n\r\n  updateItemsByWeight(): void {\r\n    for (const { weight, items } of this.selectedItems) {\r\n      this.itemsByWeight[weight] = items.map((item) => ({\r\n        value: item.index,\r\n        label: `${item.index}, ${item.name}`,\r\n        weight: `${item.weight}kg`,\r\n        cost: `€${item.cost}`\r\n      }));\r\n    }\r\n  }\r\n\r\n  submitForm(): void {\r\n    if (this.packingForm.valid) {\r\n      const formValue = this.packingForm.value;\r\n      console.log(formValue);\r\n    }\r\n  }\r\n\r\n  onWeightSelected(): void {\r\n    const weightLimit = this.packingForm.get('weightLimit')?.value;\r\n    const selectedItemIndex = this.packingForm.get('items')?.value[this.items.controls.length - 1]?.index;\r\n\r\n    if (weightLimit && selectedItemIndex !== null) {\r\n      const selectedItems = this.itemsByWeight[weightLimit];\r\n      const selectedItem = selectedItems.find(item => item.value === selectedItemIndex);\r\n\r\n      if (selectedItem) {\r\n        this.selectedItem = selectedItem;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}