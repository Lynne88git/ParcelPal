{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/parcel-data-service\";\nimport * as i3 from \"@angular/common\";\nfunction PackingFormComponent_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const weightLimit_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", weightLimit_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", weightLimit_r5, \"kg\");\n  }\n}\nfunction PackingFormComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtext(1, \" Please select a parcel/box weight before adding an item. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PackingFormComponent_div_17_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", option_r9.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r9.label, \" \");\n  }\n}\nfunction PackingFormComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 21)(1, \"div\", 22)(2, \"div\", 23)(3, \"div\", 7)(4, \"label\", 24);\n    i0.ɵɵtext(5, \"Select Item:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"select\", 25);\n    i0.ɵɵlistener(\"change\", function PackingFormComponent_div_17_Template_select_change_6_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onWeightSelected());\n    });\n    i0.ɵɵelementStart(7, \"option\", 26);\n    i0.ɵɵtext(8, \"-- Select Item --\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, PackingFormComponent_div_17_option_9_Template, 2, 2, \"option\", 27);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"div\", 23)(11, \"label\", 28);\n    i0.ɵɵtext(12, \"Weight\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"input\", 29);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"div\", 23)(15, \"label\", 28);\n    i0.ɵɵtext(16, \"Cost\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"div\", 30);\n    i0.ɵɵelement(18, \"input\", 31);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"div\", 32)(20, \"button\", 33);\n    i0.ɵɵlistener(\"click\", function PackingFormComponent_div_17_Template_button_click_20_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.addItemToParcel(ctx_r12.selectedItem));\n    });\n    i0.ɵɵtext(21, \"Add to Parcel\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const i_r7 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_2_0;\n    i0.ɵɵproperty(\"formGroupName\", i_r7);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngValue\", null);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.itemsByWeight[(tmp_2_0 = ctx_r2.packingForm.get(\"weightLimit\")) == null ? null : tmp_2_0.value]);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"value\", (ctx_r2.selectedItem == null ? null : ctx_r2.selectedItem.weight) || \"\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"value\", (ctx_r2.selectedItem == null ? null : ctx_r2.selectedItem.cost) || \"\");\n  }\n}\nfunction PackingFormComponent_button_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 34);\n    i0.ɵɵlistener(\"click\", function PackingFormComponent_button_18_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.addItem());\n    });\n    i0.ɵɵtext(1, \"Add Item\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PackingFormComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 35)(1, \"p\", 36);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 37);\n    i0.ɵɵlistener(\"click\", function PackingFormComponent_div_25_Template_div_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const selectedItem_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.removeItem(selectedItem_r15));\n    });\n    i0.ɵɵelement(4, \"img\", 38);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const selectedItem_r15 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(selectedItem_r15.name);\n  }\n}\nexport class PackingFormComponent {\n  constructor(fb, parcelDataService) {\n    this.fb = fb;\n    this.parcelDataService = parcelDataService;\n    this.availableItems = [];\n    this.selectedItemsList = [];\n    this.showWeightError = false;\n    this.isParcelSelected = false;\n    this.solution = '';\n    this.error = '';\n  }\n  ngOnInit() {\n    this.initForm();\n    this.parcelDataService.fetchParcels().subscribe(response => {\n      const parcels = this.parseResponse(response);\n      const {\n        availableItems,\n        sampleParcelWeights,\n        selectedItems\n      } = this.parseInputData(parcels);\n      this.availableItems = availableItems;\n      // Update this.sampleParcelWeights to store the sample parcel weights\n      this.sampleParcelWeights = sampleParcelWeights;\n      this.selectedItems = selectedItems;\n    }, error => {\n      console.error(error);\n    });\n  }\n  //initForm(): void {\n  //  this.packingForm = this.fb.group({\n  //    weightLimit: ['', Validators.required],\n  //    items: this.fb.array([])\n  //  });\n  //  this.packingForm.get('weightLimit')?.valueChanges.subscribe((selectedWeight) => {\n  //    this.filterItemsByWeight(selectedWeight);\n  //  });\n  //}\n  //get items(): FormArray {\n  //  return this.packingForm.get('items') as FormArray;\n  //}\n  //createItemGroup(item: Item): FormGroup {\n  //  return this.fb.group({\n  //    index: [item.index, Validators.required],\n  //    weight: [`${item.weight}kg`],\n  //    cost: [`${item.cost}`]\n  //  });\n  //}\n  // Adds the selected sample parcel not the items in it\n  //addItem(): void {\n  //  const selectedWeight = this.packingForm.get('weightLimit')?.value;\n  //  if (selectedWeight) {\n  //    const emptyItem: Item = { index: '', name: '', weight: 0, cost: '' };\n  //    this.items.push(this.createItemGroup(emptyItem));\n  //    this.selectedParcelWeight = selectedWeight; // Assign the selected parcel weight\n  //    console.log('Selected Parcel Weight:', selectedWeight);\n  //  } else {\n  //    // Display an error message \n  //    this.showWeightError = true; // Set the error flag to display the message\n  //    console.log('Please select a parcel/box weight before adding an item.');\n  //  }\n  //}\n  //removeItem(selectedItem: any): void {\n  //  const index = this.selectedItemsList.indexOf(selectedItem);\n  //  if (index !== -1) {\n  //    this.selectedItemsList.splice(index, 1); // Remove the item from the selectedItemsList\n  //    console.log('Selected Items:', this.selectedItemsList); // Log the updated selectedItemsList\n  //  }\n  //}\n  //filterItemsByWeight(selectedWeight: number): void {\n  //  const selectedItems = this.selectedItems.find(item => item.weight === selectedWeight);\n  //  if (selectedItems) {\n  //    this.availableItems = selectedItems.items;\n  //  } else {\n  //    this.availableItems = [];\n  //  }\n  //}\n  parseInputData(response) {\n    const lines = response.trim().split('\\n');\n    const availableItems = [];\n    const sampleParcelWeights = [];\n    const selectedItems = [];\n    for (const line of lines) {\n      const parts = line.split(':');\n      const weightLimit = Number(parts[0].trim());\n      const itemListString = parts[1].trim();\n      const items = this.parseItemList(itemListString);\n      availableItems.push(...items); // Add the items to the availableItems array\n      sampleParcelWeights.push(weightLimit); // Add the weight limit to the sampleParcelWeights array\n      selectedItems.push({\n        weight: weightLimit,\n        items: items\n      }); // Add the weight limit and items as an object to the selectedItems array\n    }\n\n    return {\n      availableItems,\n      sampleParcelWeights,\n      selectedItems\n    };\n  }\n  //updateItemsByWeight(): void {\n  //  for (const { weight, items } of this.selectedItems) {\n  //    this.itemsByWeight[weight] = items.map((item) => ({\n  //      value: { index: item.index, name: item.name, weight: item.weight, cost: item.cost },\n  //      label: `${item.index}, ${item.name}`,\n  //      weight: `${item.weight}kg`,\n  //      cost: `${item.cost}`,\n  //      selectedItem: false // Add a new property to track selection\n  //    }));\n  //  }\n  //}\n  // Adds actual items to your parcel\n  addItemToParcel(item) {\n    this.selectedItemsList.push(item);\n    console.log('Selected Item:', item);\n  }\n  parseItemList(itemListString) {\n    const items = [];\n    // Parse the itemListString and extract individual items\n    // Example implementation:\n    const itemStrings = itemListString.split(',');\n    for (const itemString of itemStrings) {\n      const parts = itemString.trim().split('|');\n      const index = parts[0].trim();\n      const name = parts[1].trim();\n      const weight = Number(parts[2].trim());\n      const cost = parts[3].trim();\n      const item = {\n        index,\n        name,\n        weight,\n        cost\n      };\n      items.push(item);\n    }\n    return items;\n  }\n  parseResponse(response) {\n    const parcels = [];\n    const lines = response.trim().split('\\n');\n    for (const line of lines) {\n      const parts = line.split(':');\n      const weightLimit = Number(parts[0].trim());\n      const itemListString = parts[1].trim();\n      const items = this.parseItemList(itemListString);\n      const parcel = {\n        id: 0,\n        sampleParcelWeight: weightLimit,\n        weight: 0,\n        items: items\n      };\n      parcels.push(parcel);\n    }\n    return parcels;\n  }\n  submitForm(weightLimit) {\n    this.parcelDataService.fetchParcels().subscribe(result => {\n      this.solution = this.getSolution(result, weightLimit);\n      this.error = ''; // Clear any previous error\n    }, error => {\n      this.solution = ''; // Clear the solution in case of an error\n      this.error = error;\n    });\n  }\n  getSolution(result, weightLimit) {\n    const lines = result.split('\\n');\n    const lineIndex = weightLimit - 1;\n    if (lineIndex >= 0 && lineIndex < lines.length) {\n      return lines[lineIndex];\n    }\n    return '';\n  }\n  onWeightSelected() {\n    const weightLimit = this.selectedParcelWeight;\n    const selectedItemIndex = this.selectedItemsList.length - 1;\n    if (weightLimit && selectedItemIndex !== null) {\n      this.isParcelSelected = true;\n    }\n  }\n}\nPackingFormComponent.ɵfac = function PackingFormComponent_Factory(t) {\n  return new (t || PackingFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ParcelDataService));\n};\nPackingFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PackingFormComponent,\n  selectors: [[\"app-packing-form\"]],\n  decls: 26,\n  vars: 7,\n  consts: [[1, \"container-fluid\"], [1, \"row\"], [1, \"d-flex\", \"justify-content-center\", \"mt-5\"], [\"src\", \"../../assets/logo.png\", \"alt\", \"App Logo\", 1, \"app-logo\"], [1, \"col-md-6\"], [1, \"p-5\", \"packingForm\", 3, \"formGroup\", \"ngSubmit\"], [1, \"text-light\", \"mb-2\"], [1, \"form-group\"], [\"for\", \"weight\", 1, \"text-light\", \"my-2\"], [\"id\", \"weight\", \"formControlName\", \"weightLimit\", 1, \"form-control\", 3, \"change\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"formArrayName\", \"items\"], [\"class\", \"item-group\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"btn btn-yellow py-2 my-2\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-yellow\", \"w-100\", 3, \"disabled\"], [1, \"text-light\", \"mb-2\", \"p-5\"], [\"class\", \"selected-item d-flex flex-row\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"text-danger\"], [1, \"item-group\", 3, \"formGroupName\"], [1, \"form-row\", \"w-50\", \"mt-4\"], [1, \"col\"], [\"for\", \"selectedItem\", 1, \"text-light\"], [\"formControlName\", \"index\", 1, \"form-control\", 3, \"change\"], [3, \"ngValue\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [1, \"text-light\"], [\"type\", \"text\", \"formControlName\", \"weight\", \"readonly\", \"\", 1, \"form-control\", 3, \"value\"], [1, \"input-group\"], [\"type\", \"text\", \"formControlName\", \"cost\", \"readonly\", \"\", 1, \"form-control\", 3, \"value\"], [1, \"d-flex\", \"justify-content-start\"], [\"type\", \"button\", 1, \"btn\", \"btn-yellow\", \"py-2\", \"my-4\", \"w-100\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-yellow\", \"py-2\", \"my-2\", 3, \"click\"], [1, \"selected-item\", \"d-flex\", \"flex-row\"], [1, \"text-light\", \"mb-2\", \"px-5\"], [3, \"click\"], [\"src\", \"../../assets/close.png\", \"alt\", \"Remove Item\", 1, \"remove-button\"]],\n  template: function PackingFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"img\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 4)(5, \"form\", 5);\n      i0.ɵɵlistener(\"ngSubmit\", function PackingFormComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵelementStart(6, \"h4\", 6);\n      i0.ɵɵtext(7, \"Choose a Sample Size Shipping Box\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 7)(9, \"label\", 8);\n      i0.ɵɵtext(10, \"Weight\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"select\", 9);\n      i0.ɵɵlistener(\"change\", function PackingFormComponent_Template_select_change_11_listener() {\n        return ctx.onWeightSelected();\n      });\n      i0.ɵɵelementStart(12, \"option\", 10);\n      i0.ɵɵtext(13, \"-- Select Weight Limit --\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(14, PackingFormComponent_option_14_Template, 2, 2, \"option\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(15, PackingFormComponent_div_15_Template, 2, 0, \"div\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 13);\n      i0.ɵɵtemplate(17, PackingFormComponent_div_17_Template, 22, 5, \"div\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(18, PackingFormComponent_button_18_Template, 2, 0, \"button\", 15);\n      i0.ɵɵelementStart(19, \"button\", 16);\n      i0.ɵɵtext(20, \"Submit\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(21, \"div\", 4)(22, \"h4\", 17);\n      i0.ɵɵtext(23, \"Your Selection:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"div\");\n      i0.ɵɵtemplate(25, PackingFormComponent_div_25_Template, 5, 1, \"div\", 18);\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.packingForm);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngForOf\", ctx.sampleParcelWeights);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showWeightError);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.items.controls);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isParcelSelected);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.packingForm.valid || ctx.items.length === 0);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.selectedItemsList);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName],\n  styles: [\".item-group[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.btn-danger[_ngcontent-%COMP%] {\\r\\n  margin-left: 10px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9wYWNraW5nLWZvcm0vcGFja2luZy1mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQiIsInNvdXJjZXNDb250ZW50IjpbIi5pdGVtLWdyb3VwIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxufVxyXG5cclxuLmJ0bi1kYW5nZXIge1xyXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","PackingFormComponent","constructor","fb","parcelDataService","ngOnInit","initForm","fetchParcels","subscribe","response","parcels","parseResponse","availableItems","sampleParcelWeights","selectedItems","parseInputData","error","console","lines","trim","split","line","parts","weightLimit","Number","itemListString","items","parseItemList","push","weight","addItemToParcel","item","selectedItemsList","log","itemStrings","itemString","index","name","cost","parcel","id","sampleParcelWeight","submitForm","result","solution","getSolution","lineIndex","length","onWeightSelected","selectedParcelWeight","selectedItemIndex","isParcelSelected","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\components\\packing-form\\packing-form.component.html","C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\components\\packing-form\\packing-form.component.ts"],"sourcesContent":["\r\n <div class=\"container-fluid\">\r\n  <div class=\"row\">\r\n   <div class=\"d-flex justify-content-center mt-5\">\r\n                <img src=\"../../assets/logo.png\" alt=\"App Logo\" class=\"app-logo\">\r\n            </div>\r\n    <div class=\"col-md-6\">\r\n      <form class=\"p-5 packingForm\" [formGroup]=\"packingForm\" (ngSubmit)=\"submitForm()\">\r\n                <h4 class=\"text-light mb-2\">Choose a Sample Size Shipping Box</h4>\r\n\r\n                <div class=\"form-group\">\r\n                    <label for=\"weight\" class=\"text-light my-2\">Weight</label>\r\n                    <!-- Weight dropdown -->\r\n                    <select class=\"form-control\" id=\"weight\" formControlName=\"weightLimit\" (change)=\"onWeightSelected()\">\r\n                        <option value=\"\">-- Select Weight Limit --</option>\r\n                        <option *ngFor=\"let weightLimit of sampleParcelWeights\" [value]=\"weightLimit\">{{ weightLimit }}kg</option>\r\n                    </select>\r\n                      <div class=\"text-danger\" *ngIf=\"showWeightError\">\r\n                                Please select a parcel/box weight before adding an item.\r\n                      </div>\r\n                </div>\r\n\r\n                <div formArrayName=\"items\">\r\n                    <div class=\"item-group\" *ngFor=\"let itemGroup of items.controls; let i = index\" [formGroupName]=\"i\">\r\n                        <div class=\"form-row w-50 mt-4\">\r\n                            <div class=\"col\">\r\n                                <div class=\"form-group\">\r\n                                    <label class=\"text-light\" for=\"selectedItem\">Select Item:</label>\r\n                                    <select class=\"form-control\" formControlName=\"index\" (change)=\"onWeightSelected()\">\r\n                                        <option [ngValue]=\"null\">-- Select Item --</option>\r\n                                        <option *ngFor=\"let option of itemsByWeight[packingForm.get('weightLimit')?.value]\" [ngValue]=\"option.value\">\r\n                                            {{ option.label }}\r\n                                        </option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col\">\r\n                                <label class=\"text-light\">Weight</label>\r\n                                <input type=\"text\" class=\"form-control\" formControlName=\"weight\" [value]=\"selectedItem?.weight || ''\" readonly>\r\n                            </div>\r\n                            <div class=\"col\">\r\n                                <label class=\"text-light\">Cost</label>\r\n                                <div class=\"input-group\">\r\n                                    <input type=\"text\" class=\"form-control\" formControlName=\"cost\" [value]=\"selectedItem?.cost || ''\" readonly>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"d-flex justify-content-start\">\r\n                                 <button type=\"button\" class=\"btn btn-yellow py-2 my-4 w-100\" (click)=\"addItemToParcel(selectedItem)\">Add to Parcel</button>\r\n                            </div>\r\n                        </div>\r\n                \r\n                    </div>\r\n                </div>\r\n\r\n        <button class=\"btn btn-yellow py-2 my-2\" *ngIf=\"!isParcelSelected\" type=\"button\" (click)=\"addItem()\">Add Item</button>\r\n\r\n                    <!-- Display weight limit error message -->\r\n<!--            <div *ngIf=\"showWeightLimitError\" class=\"error-message\">\r\n              Maximum weight limit exceeded.\r\n            </div>-->\r\n\r\n            <!-- Display cost limit error message -->\r\n    <!--        <div *ngIf=\"showCostLimitError\" class=\"error-message\">\r\n              Maximum cost limit exceeded.\r\n            </div>\r\n-->\r\n        <button class=\"btn btn-yellow w-100\" type=\"submit\" [disabled]=\"!packingForm.valid || items.length === 0\">Submit</button>\r\n    \r\n      </form>\r\n    </div>\r\n    <div class=\"col-md-6\">\r\n            <h4 class=\"text-light mb-2 p-5\">Your Selection:</h4>\r\n             <div>\r\n  <div class=\"selected-item d-flex flex-row\" *ngFor=\"let selectedItem of selectedItemsList\" >\r\n    <p class=\"text-light mb-2 px-5\">{{ selectedItem.name }}</p>\r\n    <div (click)=\"removeItem(selectedItem)\">\r\n     <img src=\"../../assets/close.png\" alt=\"Remove Item\" class=\"remove-button\">\r\n     </div>\r\n  </div>\r\n</div>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { Item } from '../../interfaces/item.interface';\r\nimport { Parcel } from '../../interfaces/parcel.interface';\r\nimport { ParcelDataService } from '../../services/parcel-data-service';\r\n\r\n@Component({\r\n  selector: 'app-packing-form',\r\n  templateUrl: './packing-form.component.html',\r\n  styleUrls: ['./packing-form.component.css']\r\n})\r\nexport class PackingFormComponent implements OnInit {\r\n  packingForm: FormGroup;\r\n  availableItems: Item[] = [];\r\n  selectedItemsList: Item[] = [];\r\n  showWeightError = false;\r\n  isParcelSelected = false;\r\n  selectedParcelWeight: number | undefined;\r\n  solution = '';\r\n  error = '';\r\n\r\n\r\n  constructor(private fb: FormBuilder, private parcelDataService: ParcelDataService) { }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    this.parcelDataService.fetchParcels().subscribe(\r\n      (response: string) => {\r\n        const parcels: Parcel[] = this.parseResponse(response);\r\n        const { availableItems, sampleParcelWeights, selectedItems } = this.parseInputData(parcels);\r\n        this.availableItems = availableItems;\r\n        // Update this.sampleParcelWeights to store the sample parcel weights\r\n        this.sampleParcelWeights = sampleParcelWeights;\r\n        this.selectedItems = selectedItems;\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  //initForm(): void {\r\n  //  this.packingForm = this.fb.group({\r\n  //    weightLimit: ['', Validators.required],\r\n  //    items: this.fb.array([])\r\n  //  });\r\n\r\n  //  this.packingForm.get('weightLimit')?.valueChanges.subscribe((selectedWeight) => {\r\n  //    this.filterItemsByWeight(selectedWeight);\r\n  //  });\r\n  //}\r\n\r\n  //get items(): FormArray {\r\n  //  return this.packingForm.get('items') as FormArray;\r\n  //}\r\n\r\n  //createItemGroup(item: Item): FormGroup {\r\n  //  return this.fb.group({\r\n  //    index: [item.index, Validators.required],\r\n  //    weight: [`${item.weight}kg`],\r\n  //    cost: [`${item.cost}`]\r\n  //  });\r\n  //}\r\n  // Adds the selected sample parcel not the items in it\r\n  //addItem(): void {\r\n  //  const selectedWeight = this.packingForm.get('weightLimit')?.value;\r\n  //  if (selectedWeight) {\r\n  //    const emptyItem: Item = { index: '', name: '', weight: 0, cost: '' };\r\n  //    this.items.push(this.createItemGroup(emptyItem));\r\n  //    this.selectedParcelWeight = selectedWeight; // Assign the selected parcel weight\r\n\r\n  //    console.log('Selected Parcel Weight:', selectedWeight);\r\n\r\n  //  } else {\r\n  //    // Display an error message \r\n  //    this.showWeightError = true; // Set the error flag to display the message\r\n  //    console.log('Please select a parcel/box weight before adding an item.');\r\n  //  }\r\n  //}\r\n\r\n  //removeItem(selectedItem: any): void {\r\n  //  const index = this.selectedItemsList.indexOf(selectedItem);\r\n  //  if (index !== -1) {\r\n  //    this.selectedItemsList.splice(index, 1); // Remove the item from the selectedItemsList\r\n  //    console.log('Selected Items:', this.selectedItemsList); // Log the updated selectedItemsList\r\n  //  }\r\n  //}\r\n\r\n\r\n  //filterItemsByWeight(selectedWeight: number): void {\r\n  //  const selectedItems = this.selectedItems.find(item => item.weight === selectedWeight);\r\n  //  if (selectedItems) {\r\n  //    this.availableItems = selectedItems.items;\r\n  //  } else {\r\n  //    this.availableItems = [];\r\n  //  }\r\n  //}\r\n\r\n  parseInputData(response: string): { availableItems: Item[], sampleParcelWeights: number[], selectedItems: { weight: number, items: Item[] }[] } {\r\n    const lines = response.trim().split('\\n');\r\n    const availableItems: Item[] = [];\r\n    const sampleParcelWeights: number[] = [];\r\n    const selectedItems: { weight: number, items: Item[] }[] = [];\r\n\r\n    for (const line of lines) {\r\n      const parts = line.split(':');\r\n      const weightLimit = Number(parts[0].trim());\r\n      const itemListString = parts[1].trim();\r\n      const items = this.parseItemList(itemListString);\r\n\r\n      availableItems.push(...items); // Add the items to the availableItems array\r\n      sampleParcelWeights.push(weightLimit); // Add the weight limit to the sampleParcelWeights array\r\n      selectedItems.push({ weight: weightLimit, items: items }); // Add the weight limit and items as an object to the selectedItems array\r\n    }\r\n\r\n    return { availableItems, sampleParcelWeights, selectedItems };\r\n  }\r\n\r\n\r\n  //updateItemsByWeight(): void {\r\n  //  for (const { weight, items } of this.selectedItems) {\r\n  //    this.itemsByWeight[weight] = items.map((item) => ({\r\n  //      value: { index: item.index, name: item.name, weight: item.weight, cost: item.cost },\r\n  //      label: `${item.index}, ${item.name}`,\r\n  //      weight: `${item.weight}kg`,\r\n  //      cost: `${item.cost}`,\r\n  //      selectedItem: false // Add a new property to track selection\r\n  //    }));\r\n  //  }\r\n  //}\r\n\r\n  // Adds actual items to your parcel\r\n  addItemToParcel(item: Item): void {\r\n    this.selectedItemsList.push(item);\r\n    console.log('Selected Item:', item);\r\n  }\r\n\r\n  parseItemList(itemListString: string): Item[] {\r\n    const items: Item[] = [];\r\n    // Parse the itemListString and extract individual items\r\n    // Example implementation:\r\n    const itemStrings = itemListString.split(',');\r\n    for (const itemString of itemStrings) {\r\n      const parts = itemString.trim().split('|');\r\n      const index = parts[0].trim();\r\n      const name = parts[1].trim();\r\n      const weight = Number(parts[2].trim());\r\n      const cost = parts[3].trim();\r\n      const item: Item = { index, name, weight, cost };\r\n      items.push(item);\r\n    }\r\n    return items;\r\n  }\r\n\r\n\r\n  private parseResponse(response: string): Parcel[] {\r\n    const parcels: Parcel[] = [];\r\n    const lines = response.trim().split('\\n');\r\n\r\n    for (const line of lines) {\r\n      const parts = line.split(':');\r\n      const weightLimit = Number(parts[0].trim());\r\n      const itemListString = parts[1].trim();\r\n      const items = this.parseItemList(itemListString);\r\n      const parcel: Parcel = {\r\n        id: 0, // Set the appropriate ID if available\r\n        sampleParcelWeight: weightLimit,\r\n        weight: 0, // Set the appropriate weight if available\r\n        items: items\r\n      };\r\n      parcels.push(parcel);\r\n    }\r\n\r\n    return parcels;\r\n  }\r\n\r\n  submitForm(weightLimit: number) {\r\n    this.parcelDataService.fetchParcels().subscribe(\r\n      (result: string) => {\r\n        this.solution = this.getSolution(result, weightLimit);\r\n        this.error = ''; // Clear any previous error\r\n      },\r\n      (error: string) => {\r\n        this.solution = ''; // Clear the solution in case of an error\r\n        this.error = error;\r\n      }\r\n    );\r\n  }\r\n\r\n  private getSolution(result: string, weightLimit: number): string {\r\n    const lines = result.split('\\n');\r\n    const lineIndex = weightLimit - 1;\r\n    if (lineIndex >= 0 && lineIndex < lines.length) {\r\n      return lines[lineIndex];\r\n    }\r\n    return '';\r\n  }\r\n\r\n  onWeightSelected(): void {\r\n    const weightLimit = this.selectedParcelWeight;\r\n    const selectedItemIndex = this.selectedItemsList.length - 1;\r\n\r\n    if (weightLimit && selectedItemIndex !== null) {\r\n      this.isParcelSelected = true;\r\n    }\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}