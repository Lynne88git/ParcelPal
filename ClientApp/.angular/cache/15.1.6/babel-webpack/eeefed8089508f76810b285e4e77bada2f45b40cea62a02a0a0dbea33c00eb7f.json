{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nlet PackingFormComponent = class PackingFormComponent {\n  constructor(fb, http, parcelDataService) {\n    this.fb = fb;\n    this.http = http;\n    this.parcelDataService = parcelDataService;\n    this.packingForm = new FormGroup({});\n    this.availableItems = []; // Update this with the items from input.txt\n    this.sampleParcelWeights = []; // Update this with the sample parcel weights from input.txt\n    this.selectedItems = [];\n    this.selectedItem = null; // Update this line to store the selected item\n    this.itemsByWeight = {};\n    this.showWeightError = false;\n  }\n  ngOnInit() {\n    this.initForm();\n    this.parcelDataService.fetchParcels().subscribe(parcels => {\n      this.parseInputData(parcels);\n      this.updateItemsByWeight();\n    }, error => {\n      console.error(error);\n    });\n  }\n  initForm() {\n    this.packingForm = this.fb.group({\n      weightLimit: ['', Validators.required],\n      items: this.fb.array([])\n    });\n    this.packingForm.get('weightLimit')?.valueChanges.subscribe(selectedWeight => {\n      this.filterItemsByWeight(selectedWeight);\n    });\n  }\n  get items() {\n    return this.packingForm.get('items');\n  }\n  createItemGroup(item) {\n    return this.fb.group({\n      index: [item.index, Validators.required],\n      weight: [`${item.weight}kg`],\n      cost: [`${item.cost}`]\n    });\n  }\n  addItem() {\n    const selectedWeight = this.packingForm.get('weightLimit')?.value;\n    if (selectedWeight) {\n      const emptyItem = {\n        index: '',\n        name: '',\n        weight: 0,\n        cost: ''\n      };\n      this.items.push(this.createItemGroup(emptyItem));\n    } else {\n      // Display an error message or perform any desired action\n      this.showWeightError = true; // Set the error flag to display the message\n      console.log('Please select a parcel/box weight before adding an item.');\n    }\n  }\n  removeItem(index) {\n    this.items.removeAt(index);\n  }\n  filterItemsByWeight(selectedWeight) {\n    const selectedItems = this.selectedItems.find(item => item.weight === selectedWeight);\n    if (selectedItems) {\n      this.availableItems = selectedItems.items;\n    } else {\n      this.availableItems = [];\n    }\n  }\n  parseInputData(parcels) {\n    for (const parcel of parcels) {\n      this.sampleParcelWeights.push(parcel.weight);\n      this.selectedItems.push({\n        weight: parcel.weight,\n        items: parcel.items\n      });\n      this.itemsByWeight[parcel.weight] = parcel.items.map(item => ({\n        value: {\n          index: item.index,\n          name: item.name,\n          weight: item.weight,\n          cost: item.cost\n        },\n        label: `${item.index}, ${item.name}`,\n        weight: `${item.weight}kg`,\n        cost: `${item.cost}`\n      }));\n    }\n  }\n  updateItemsByWeight() {\n    for (const {\n      weight,\n      items\n    } of this.selectedItems) {\n      this.itemsByWeight[weight] = items.map(item => ({\n        value: {\n          index: item.index,\n          name: item.name,\n          weight: item.weight,\n          cost: item.cost\n        },\n        label: `${item.index}, ${item.name}`,\n        weight: `${item.weight}kg`,\n        cost: `${item.cost}`,\n        selectedItem: false // Add a new property to track selection\n      }));\n    }\n  }\n\n  addItemToParcel(item) {\n    this.selectedItem = item.value; // Get the selected item values from the form\n    console.log('Selected Item:', item.value);\n    console.log('Selected Item:', item.value);\n    // Process the selected items and add them to the sample parcel box\n    // ...\n  }\n\n  submitForm() {\n    if (this.packingForm.valid) {\n      const formValue = this.packingForm.value;\n      console.log(formValue);\n    }\n  }\n  onWeightSelected() {\n    const weightLimit = this.packingForm.get('weightLimit')?.value;\n    const selectedItemIndex = this.packingForm.get('items')?.value[this.items.controls.length - 1]?.index;\n    if (weightLimit && selectedItemIndex !== null) {\n      const selectedItems = this.itemsByWeight[weightLimit];\n      const selectedItem = selectedItems.find(item => item.value === selectedItemIndex);\n      if (selectedItem) {\n        this.selectedItem = selectedItem;\n      }\n    }\n  }\n};\nPackingFormComponent = __decorate([Component({\n  selector: 'app-packing-form',\n  templateUrl: './packing-form.component.html',\n  styleUrls: ['./packing-form.component.css']\n})], PackingFormComponent);\nexport { PackingFormComponent };","map":{"version":3,"mappings":"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","names":["Component","FormGroup","Validators","PackingFormComponent","constructor","fb","http","parcelDataService","ngOnInit","initForm","fetchParcels","subscribe","parcels","parseInputData","updateItemsByWeight","error","console","packingForm","group","weightLimit","required","items","array","get","valueChanges","selectedWeight","filterItemsByWeight","createItemGroup","item","index","weight","cost","addItem","value","emptyItem","name","push","showWeightError","log","removeItem","removeAt","selectedItems","find","availableItems","parcel","sampleParcelWeights","itemsByWeight","map","label","selectedItem","addItemToParcel","submitForm","valid","formValue","onWeightSelected","selectedItemIndex","controls","length","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\components\\packing-form\\packing-form.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Item } from '../../interfaces/item.interface';\r\nimport { Parcel } from '../../interfaces/parcel.interface';\r\nimport { ParcelDataService } from '../../services/parcel-data-service';\r\n\r\n@Component({\r\n  selector: 'app-packing-form',\r\n  templateUrl: './packing-form.component.html',\r\n  styleUrls: ['./packing-form.component.css']\r\n})\r\nexport class PackingFormComponent implements OnInit {\r\n  packingForm: FormGroup = new FormGroup({});\r\n  availableItems: Item[] = []; // Update this with the items from input.txt\r\n  sampleParcelWeights: number[] = []; // Update this with the sample parcel weights from input.txt\r\n  selectedItems: { weight: number, items: Item[] }[] = [];\r\n  selectedItem: Item | null = null; // Update this line to store the selected item\r\n  itemsByWeight: Record<number, any[]> = {};\r\n  showWeightError = false;\r\n  constructor(private fb: FormBuilder,\r\n    private http: HttpClient,\r\n    private parcelDataService: ParcelDataService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    this.parcelDataService.fetchParcels().subscribe(\r\n      (parcels: Parcel[]) => {\r\n        this.parseInputData(parcels);\r\n        this.updateItemsByWeight();\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  initForm(): void {\r\n    this.packingForm = this.fb.group({\r\n      weightLimit: ['', Validators.required],\r\n      items: this.fb.array([])\r\n    });\r\n\r\n    this.packingForm.get('weightLimit')?.valueChanges.subscribe((selectedWeight) => {\r\n      this.filterItemsByWeight(selectedWeight);\r\n    });\r\n  }\r\n\r\n  get items(): FormArray {\r\n    return this.packingForm.get('items') as FormArray;\r\n  }\r\n\r\n  createItemGroup(item: Item): FormGroup {\r\n    return this.fb.group({\r\n      index: [item.index, Validators.required],\r\n      weight: [`${item.weight}kg`],\r\n      cost: [`${item.cost}`]\r\n    });\r\n  }\r\n\r\n  addItem(): void {\r\n    const selectedWeight = this.packingForm.get('weightLimit')?.value;\r\n    if (selectedWeight) {\r\n    const emptyItem: Item = { index: '', name: '', weight: 0, cost: '' };\r\n      this.items.push(this.createItemGroup(emptyItem));\r\n    } else {\r\n      // Display an error message or perform any desired action\r\n      this.showWeightError = true; // Set the error flag to display the message\r\n      console.log('Please select a parcel/box weight before adding an item.');\r\n    }\r\n  }\r\n\r\n  removeItem(index: number): void {\r\n    this.items.removeAt(index);\r\n  }\r\n\r\n  filterItemsByWeight(selectedWeight: number): void {\r\n    const selectedItems = this.selectedItems.find(item => item.weight === selectedWeight);\r\n    if (selectedItems) {\r\n      this.availableItems = selectedItems.items;\r\n    } else {\r\n      this.availableItems = [];\r\n    }\r\n  }\r\n\r\n  parseInputData(parcels: Parcel[]): void {\r\n    for (const parcel of parcels) {\r\n      this.sampleParcelWeights.push(parcel.weight);\r\n      this.selectedItems.push({ weight: parcel.weight, items: parcel.items });\r\n\r\n      this.itemsByWeight[parcel.weight] = parcel.items.map((item) => ({\r\n        value: { index: item.index, name: item.name, weight: item.weight, cost: item.cost },\r\n        label: `${item.index}, ${item.name}`,\r\n        weight: `${item.weight}kg`,\r\n        cost: `${item.cost}`\r\n      }));\r\n    }\r\n  }\r\n\r\n\r\n  updateItemsByWeight(): void {\r\n    for (const { weight, items } of this.selectedItems) {\r\n      this.itemsByWeight[weight] = items.map((item) => ({\r\n        value: { index: item.index, name: item.name, weight: item.weight, cost: item.cost },\r\n        label: `${item.index}, ${item.name}`,\r\n        weight: `${item.weight}kg`,\r\n        cost: `${item.cost}`,\r\n        selectedItem: false // Add a new property to track selection\r\n      }));\r\n    }\r\n  }\r\n\r\n  addItemToParcel(item: any) {\r\n    this.selectedItem = item.value; // Get the selected item values from the form\r\n    console.log('Selected Item:', item.value);\r\n    console.log('Selected Item:', item.value);\r\n  // Process the selected items and add them to the sample parcel box\r\n  // ...\r\n}\r\n\r\n\r\n  submitForm(): void {\r\n    if (this.packingForm.valid) {\r\n      const formValue = this.packingForm.value;\r\n      console.log(formValue);\r\n    }\r\n  }\r\n\r\n  onWeightSelected(): void {\r\n    const weightLimit = this.packingForm.get('weightLimit')?.value;\r\n    const selectedItemIndex = this.packingForm.get('items')?.value[this.items.controls.length - 1]?.index;\r\n\r\n    if (weightLimit && selectedItemIndex !== null) {\r\n      const selectedItems = this.itemsByWeight[weightLimit];\r\n      const selectedItem = selectedItems.find(item => item.value === selectedItemIndex);\r\n\r\n      if (selectedItem) {\r\n        this.selectedItem = selectedItem;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}