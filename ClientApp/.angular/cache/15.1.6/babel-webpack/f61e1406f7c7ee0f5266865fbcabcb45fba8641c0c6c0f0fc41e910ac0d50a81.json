{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ParcelDataService {\n  constructor(http) {\n    this.http = http;\n    this.fileUrl = 'https://gist.githubusercontent.com/Lynne88git/552c061f4ebe867b70f6bc2376653b02/raw/876ca05861ce3bed421e0970b24563dfdfeb7ca5/input.txt';\n  }\n  fetchParcels() {\n    return this.http.get(this.fileUrl, {\n      responseType: 'text'\n    }).pipe(catchError(this.handleError), map(response => {\n      // Split the response into individual lines\n      const lines = response.trim().split('\\n');\n      // Process each line and extract weight limit and item list\n      const result = lines.map(line => {\n        const parts = line.split(':');\n        const weightLimit = Number(parts[0].trim());\n        const itemListString = parts[1].trim();\n        const items = this.parseItemList(itemListString);\n        const chosenItems = this.selectOptimalItems(weightLimit, items);\n        const solution = this.generateSolutionString(chosenItems);\n        return solution;\n      });\n      // Join the results with line breaks and return as a single string\n      return result.join('\\n');\n    }));\n  }\n  parseItemList(data) {\n    // Use regular expressions to extract individual item details\n    const pattern = /\\((\\d+),\\s*(.*?),\\s*([\\d.]+),\\s*€([\\d.]+)\\)/g;\n    const matches = data.matchAll(pattern);\n    // Process each match and create Item objects\n    const items = [];\n    for (const match of matches) {\n      const index = match[1];\n      const name = match[2];\n      const weight = Number(match[3]);\n      const cost = Number(match[4]);\n      const item = {\n        index,\n        name,\n        weight,\n        cost\n      };\n      items.push(item);\n    }\n    return items;\n  }\n  selectOptimalItems(weightLimit, items) {\n    const itemCount = items.length;\n    const dp = [];\n    // Initialize the dynamic programming table created in Packer.cs\n    for (let i = 0; i <= itemCount; i++) {\n      dp[i] = [];\n      for (let w = 0; w <= weightLimit; w++) {\n        if (i === 0 || w === 0) {\n          dp[i][w] = 0;\n        } else if (items[i - 1].weight <= w) {\n          const currentItem = items[i - 1];\n          const cost = typeof currentItem.cost === 'number' ? currentItem.cost : parseFloat(currentItem.cost);\n          dp[i][w] = Math.max(cost + dp[i - 1][Math.floor(w - items[i - 1].weight)], dp[i - 1][w]);\n        } else {\n          dp[i][w] = dp[i - 1][w];\n        }\n      }\n    }\n    // Find the selected items by backtracking through the dynamic programming table\n    const chosenItems = [];\n    let itemIndex = itemCount;\n    let remainingWeight = weightLimit;\n    while (itemIndex > 0 && remainingWeight > 0) {\n      if (dp[itemIndex][Math.floor(remainingWeight)] !== dp[itemIndex - 1][Math.floor(remainingWeight)]) {\n        const selectedItem = items[itemIndex - 1];\n        chosenItems.push(selectedItem);\n        remainingWeight -= selectedItem.weight;\n      }\n      itemIndex--;\n    }\n    chosenItems.reverse(); // Reverse the list to match the expected output order\n    return chosenItems;\n  }\n  generateSolutionString(chosenItems) {\n    const itemIndices = chosenItems.map(item => item.index);\n    return itemIndices.join(',');\n  }\n  handleError(error) {\n    console.error('An error occurred:', error);\n    return throwError('Something went wrong. Please try again later.');\n  }\n}\nParcelDataService.ɵfac = function ParcelDataService_Factory(t) {\n  return new (t || ParcelDataService)(i0.ɵɵinject(i1.HttpClient));\n};\nParcelDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ParcelDataService,\n  factory: ParcelDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","map","throwError","ParcelDataService","constructor","http","fetchParcels","get","fileUrl","responseType","pipe","handleError","response","lines","trim","split","result","line","parts","weightLimit","Number","itemListString","items","parseItemList","chosenItems","selectOptimalItems","solution","generateSolutionString","join","data","pattern","matches","matchAll","match","index","name","weight","cost","item","push","itemCount","length","dp","i","w","currentItem","parseFloat","Math","max","floor","itemIndex","remainingWeight","selectedItem","reverse","itemIndices","error","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\services\\parcel-data-service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { Item } from '../interfaces/item.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ParcelDataService {\r\n  private fileUrl = 'https://gist.githubusercontent.com/Lynne88git/552c061f4ebe867b70f6bc2376653b02/raw/876ca05861ce3bed421e0970b24563dfdfeb7ca5/input.txt';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  fetchParcels(): Observable<string[]> {\r\n    return this.http.get(this.fileUrl, { responseType: 'text' })\r\n      .pipe(\r\n        catchError(this.handleError),\r\n        map(response => {\r\n          // Split the response into individual lines\r\n          const lines = response.trim().split('\\n');\r\n\r\n          // Process each line and extract weight limit and item list\r\n          const result = lines.map(line => {\r\n            const parts = line.split(':');\r\n            const weightLimit = Number(parts[0].trim());\r\n            const itemListString = parts[1].trim();\r\n            const items = this.parseItemList(itemListString);\r\n            const chosenItems = this.selectOptimalItems(weightLimit, items);\r\n            const solution = this.generateSolutionString(chosenItems);\r\n            return solution;\r\n          });\r\n\r\n          // Join the results with line breaks and return as a single string\r\n          return result.join('\\n');\r\n        })\r\n      );\r\n  }\r\n\r\n  private parseItemList(data: string): Item[] {\r\n    // Use regular expressions to extract individual item details\r\n    const pattern = /\\((\\d+),\\s*(.*?),\\s*([\\d.]+),\\s*€([\\d.]+)\\)/g;\r\n    const matches = data.matchAll(pattern);\r\n\r\n    // Process each match and create Item objects\r\n    const items: Item[] = [];\r\n    for (const match of matches) {\r\n      const index = match[1];\r\n      const name = match[2];\r\n      const weight = Number(match[3]);\r\n      const cost = Number(match[4]);\r\n      const item: Item = { index, name, weight, cost };\r\n      items.push(item);\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  private selectOptimalItems(weightLimit: number, items: Item[]): Item[] {\r\n    const itemCount = items.length;\r\n    const dp: number[][] = [];\r\n\r\n    // Initialize the dynamic programming table created in Packer.cs\r\n    for (let i = 0; i <= itemCount; i++) {\r\n      dp[i] = [];\r\n      for (let w = 0; w <= weightLimit; w++) {\r\n        if (i === 0 || w === 0) {\r\n          dp[i][w] = 0;\r\n        } else if (items[i - 1].weight <= w) {\r\n          const currentItem = items[i - 1];\r\n          const cost = typeof currentItem.cost === 'number' ? currentItem.cost : parseFloat(currentItem.cost);\r\n          dp[i][w] = Math.max(\r\n            cost + dp[i - 1][Math.floor(w - items[i - 1].weight)],\r\n            dp[i - 1][w]\r\n          );\r\n        } else {\r\n          dp[i][w] = dp[i - 1][w];\r\n        }\r\n      }\r\n    }\r\n\r\n    // Find the selected items by backtracking through the dynamic programming table\r\n    const chosenItems: Item[] = [];\r\n    let itemIndex = itemCount;\r\n    let remainingWeight = weightLimit;\r\n\r\n    while (itemIndex > 0 && remainingWeight > 0) {\r\n      if (dp[itemIndex][Math.floor(remainingWeight)] !== dp[itemIndex - 1][Math.floor(remainingWeight)]) {\r\n        const selectedItem = items[itemIndex - 1];\r\n        chosenItems.push(selectedItem);\r\n        remainingWeight -= selectedItem.weight;\r\n      }\r\n\r\n      itemIndex--;\r\n    }\r\n\r\n    chosenItems.reverse(); // Reverse the list to match the expected output order\r\n\r\n    return chosenItems;\r\n  }\r\n\r\n  private generateSolutionString(chosenItems: Item[]): string {\r\n    const itemIndices = chosenItems.map(item => item.index);\r\n    return itemIndices.join(',');\r\n  }\r\n\r\n  private handleError(error: any): Observable<never> {\r\n    console.error('An error occurred:', error);\r\n    return throwError('Something went wrong. Please try again later.');\r\n  }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}