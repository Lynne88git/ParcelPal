{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/common\";\nfunction PackingFormComponent_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const weight_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", weight_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(weight_r2);\n  }\n}\nfunction PackingFormComponent_div_21_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", item_r6.index);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r6.name);\n  }\n}\nfunction PackingFormComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 18)(1, \"div\", 19)(2, \"div\", 20)(3, \"div\", 7)(4, \"label\", 21);\n    i0.ɵɵtext(5, \"Select Item:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"select\", 22);\n    i0.ɵɵlistener(\"change\", function PackingFormComponent_div_21_Template_select_change_6_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onItemSelection($event));\n    });\n    i0.ɵɵelementStart(7, \"option\", 23);\n    i0.ɵɵtext(8, \"-- Select Item --\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, PackingFormComponent_div_21_option_9_Template, 2, 2, \"option\", 10);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"div\", 20)(11, \"label\", 24);\n    i0.ɵɵtext(12, \"Weight\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"input\", 25);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"div\", 20)(15, \"label\", 24);\n    i0.ɵɵtext(16, \"Cost\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"div\", 26)(18, \"div\", 27)(19, \"span\", 28);\n    i0.ɵɵtext(20, \"\\u20AC\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(21, \"input\", 29);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(22, \"button\", 30);\n    i0.ɵɵlistener(\"click\", function PackingFormComponent_div_21_Template_button_click_22_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const i_r4 = restoredCtx.index;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.removeItem(i_r4));\n    });\n    i0.ɵɵtext(23, \"Remove\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const i_r4 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroupName\", i_r4);\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.availableItems);\n  }\n}\nexport class PackingFormComponent {\n  constructor(fb, http) {\n    this.fb = fb;\n    this.http = http;\n    this.packingForm = new FormGroup({});\n    this.sampleWeights = [];\n    this.allItems = [];\n    this.availableItems = [];\n  }\n  ngOnInit() {\n    this.initForm();\n    this.loadSampleWeights();\n    const filePath = 'assets/input.txt';\n    this.http.get(filePath, {\n      responseType: 'text'\n    }).subscribe(response => {\n      this.allItems = this.extractItems(response); // Load all items\n    }, error => {\n      console.error(error);\n    });\n  }\n  initForm() {\n    this.packingForm = this.fb.group({\n      weightLimit: ['', [Validators.required, Validators.max(100)]],\n      items: this.fb.array([]),\n      selectedItem: ['', Validators.required]\n      //customWeight: ['', [Validators.required, this.customWeightValidator]]\n    });\n\n    this.packingForm.get('weightLimit')?.valueChanges.subscribe(() => {\n      this.filterItemsByWeight();\n    });\n  }\n  get items() {\n    return this.packingForm.get('items');\n  }\n  //customWeightValidator(control: AbstractControl): ValidationErrors | null {\n  //  const value = control.value;\n  //  if (value && (value > 100 || isNaN(value))) {\n  //    return { maxWeight: true };\n  //  }\n  //  return null;\n  //}\n  addItem(item) {\n    const itemGroup = this.fb.group({\n      index: [item ? item.index : '', Validators.required],\n      weight: [item ? item.weight : '', Validators.required],\n      cost: [item ? item.cost : '', Validators.required]\n    });\n    this.items.push(itemGroup);\n  }\n  removeItem(index) {\n    this.items.removeAt(index);\n  }\n  submitForm() {\n    if (this.packingForm.valid) {\n      const formValue = this.packingForm.value;\n      console.log(formValue);\n    }\n  }\n  loadSampleWeights() {\n    const filePath = 'assets/input.txt';\n    this.http.get(filePath, {\n      responseType: 'text'\n    }).subscribe(response => {\n      const weights = this.extractWeights(response);\n      this.sampleWeights = weights; // Assign the sample weights from the API response\n    }, error => {\n      console.error(error);\n    });\n  }\n  extractWeights(data) {\n    const lines = data.split('\\n');\n    const weights = [];\n    for (const line of lines) {\n      const parts = line.split(':');\n      if (parts.length === 2) {\n        const weight = parseFloat(parts[0].trim());\n        if (!isNaN(weight)) {\n          weights.push(weight);\n        }\n      }\n    }\n    return weights;\n  }\n  loadAllItems(weight) {\n    const itemsForParcel = [];\n    let remainingWeight = weight;\n    // Iterate over available items\n    for (const item of this.availableItems) {\n      if (item.weight <= remainingWeight) {\n        itemsForParcel.push(item);\n        remainingWeight -= item.weight;\n      }\n    }\n    return itemsForParcel;\n  }\n  extractItems(data) {\n    const lines = data.split('\\n');\n    const items = [];\n    for (const line of lines) {\n      const colonIndex = line.indexOf(':');\n      if (colonIndex !== -1) {\n        const weight = parseFloat(line.substring(0, colonIndex).trim());\n        const itemData = line.substring(colonIndex + 1).split('(');\n        for (const item of itemData) {\n          const itemInfo = item.replace(/[\\)\\s]/g, '').split(',');\n          if (itemInfo.length === 3) {\n            const id = parseInt(itemInfo[0]);\n            const itemWeight = parseFloat(itemInfo[1]);\n            const cost = parseFloat(itemInfo[2].substring(1));\n            items.push({\n              id,\n              weight: itemWeight,\n              cost\n            });\n          }\n        }\n      }\n    }\n    return items;\n  }\n  filterItemsByWeight() {\n    const selectedWeight = parseFloat(this.packingForm.get('weightLimit')?.value);\n    // Clear existing items\n    while (this.items.length !== 0) {\n      this.items.removeAt(0);\n    }\n    // Filter items based on selected weight\n    this.availableItems = this.allItems.filter(item => item.weight <= selectedWeight);\n    // Log available items for each sample parcel\n    this.sampleWeights.forEach((weight, index) => {\n      const itemsForParcel = this.loadAllItems(weight);\n      console.log(`Available items for sample parcel ${index + 1}:`, itemsForParcel);\n    });\n  }\n  onItemSelection(event) {\n    const selectedIndex = event.target.value;\n    const selectedItem = this.availableItems.find(item => item.index === parseInt(selectedIndex));\n    const selectedWeight = parseFloat(this.packingForm.get('weightLimit')?.value);\n    if (selectedItem && selectedItem.weight <= selectedWeight) {\n      const itemGroup = this.fb.group({\n        index: [selectedItem.index, Validators.required],\n        weight: [selectedItem.weight, Validators.required],\n        cost: [selectedItem.cost, Validators.required]\n      });\n      this.items.push(itemGroup);\n    }\n  }\n}\nPackingFormComponent.ɵfac = function PackingFormComponent_Factory(t) {\n  return new (t || PackingFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient));\n};\nPackingFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PackingFormComponent,\n  selectors: [[\"app-packing-form\"]],\n  decls: 26,\n  vars: 4,\n  consts: [[1, \"container-fluid\"], [1, \"row\"], [1, \"col-12\"], [1, \"d-flex\", \"justify-content-center\", \"mt-5\"], [\"src\", \"../../assets/logo.png\", \"alt\", \"App Logo\", 1, \"app-logo\"], [1, \"p-5\", \"packingForm\", 3, \"formGroup\", \"ngSubmit\"], [1, \"text-light\", \"mb-4\"], [1, \"form-group\"], [\"for\", \"weight\", 1, \"text-light\", \"my-2\"], [\"id\", \"weight\", \"formControlName\", \"weightLimit\", 1, \"form-control\", 3, \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"value\", \"custom\"], [\"for\", \"items\", 1, \"text-light\", \"mt-2\"], [\"formArrayName\", \"items\"], [\"class\", \"item-group\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-yellow\", \"py-2\", \"my-2\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-yellow\", 3, \"disabled\"], [3, \"value\"], [1, \"item-group\", 3, \"formGroupName\"], [1, \"form-row\"], [1, \"col\"], [\"for\", \"selectedItem\"], [\"id\", \"index\", \"formControlName\", \"index\", 1, \"form-control\", 3, \"change\"], [\"value\", \"\"], [1, \"text-light\"], [\"type\", \"number\", \"formControlName\", \"weight\", \"placeholder\", \"Weight\", 1, \"form-control\"], [1, \"input-group\"], [1, \"input-group-prepend\"], [1, \"input-group-text\"], [\"type\", \"number\", \"formControlName\", \"cost\", \"placeholder\", \"Cost\", 1, \"form-control\"], [\"type\", \"button\", 1, \"btn\", \"btn-yellow\", 3, \"click\"]],\n  template: function PackingFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n      i0.ɵɵelement(4, \"img\", 4);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(5, \"div\", 1)(6, \"div\", 2)(7, \"form\", 5);\n      i0.ɵɵlistener(\"ngSubmit\", function PackingFormComponent_Template_form_ngSubmit_7_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵelementStart(8, \"h2\", 6);\n      i0.ɵɵtext(9, \"Enter Parcel Details\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 7)(11, \"label\", 8);\n      i0.ɵɵtext(12, \"Weight\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"select\", 9);\n      i0.ɵɵlistener(\"change\", function PackingFormComponent_Template_select_change_13_listener() {\n        return ctx.filterItemsByWeight();\n      });\n      i0.ɵɵtemplate(14, PackingFormComponent_option_14_Template, 2, 2, \"option\", 10);\n      i0.ɵɵelementStart(15, \"option\", 11);\n      i0.ɵɵtext(16, \"Enter Custom Weight\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(17, \"div\", 7)(18, \"label\", 12);\n      i0.ɵɵtext(19, \"Items:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\", 13);\n      i0.ɵɵtemplate(21, PackingFormComponent_div_21_Template, 24, 2, \"div\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"button\", 15);\n      i0.ɵɵlistener(\"click\", function PackingFormComponent_Template_button_click_22_listener() {\n        return ctx.addItem();\n      });\n      i0.ɵɵtext(23, \"Add Item\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(24, \"button\", 16);\n      i0.ɵɵtext(25, \"Submit\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"formGroup\", ctx.packingForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngForOf\", ctx.sampleWeights);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngForOf\", ctx.items.controls);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", !ctx.packingForm.valid);\n    }\n  },\n  dependencies: [i3.NgForOf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName],\n  styles: [\".item-group[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.btn-danger[_ngcontent-%COMP%] {\\r\\n  margin-left: 10px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFja2luZy1mb3JtL3BhY2tpbmctZm9ybS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyIuaXRlbS1ncm91cCB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbn1cclxuXHJcbi5idG4tZGFuZ2VyIHtcclxuICBtYXJnaW4tbGVmdDogMTBweDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","Validators","i0","PackingFormComponent","constructor","fb","http","ngOnInit","initForm","loadSampleWeights","filePath","get","responseType","subscribe","response","allItems","extractItems","error","console","packingForm","group","weightLimit","required","max","items","array","selectedItem","valueChanges","filterItemsByWeight","addItem","item","itemGroup","index","weight","cost","push","removeItem","removeAt","submitForm","valid","formValue","value","log","weights","extractWeights","sampleWeights","data","lines","split","line","parts","length","parseFloat","trim","isNaN","loadAllItems","itemsForParcel","remainingWeight","availableItems","colonIndex","indexOf","substring","itemData","itemInfo","replace","id","parseInt","itemWeight","selectedWeight","filter","forEach","onItemSelection","event","selectedIndex","target","find","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\packing-form\\packing-form.component.ts","C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\packing-form\\packing-form.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-packing-form',\r\n  templateUrl: './packing-form.component.html',\r\n  styleUrls: ['./packing-form.component.css']\r\n})\r\nexport class PackingFormComponent implements OnInit {\r\n  packingForm: FormGroup = new FormGroup({});\r\n  sampleWeights: number[] = [];\r\n  allItems: any[] = [];\r\n  availableItems: any[] = [];\r\n  constructor(private fb: FormBuilder, private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    this.loadSampleWeights();\r\n    const filePath = 'assets/input.txt';\r\n    this.http.get(filePath, { responseType: 'text' }).subscribe(\r\n      (response) => {\r\n        this.allItems = this.extractItems(response); // Load all items\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  initForm(): void {\r\n    this.packingForm = this.fb.group({\r\n      weightLimit: ['', [Validators.required, Validators.max(100)]],\r\n      items: this.fb.array([]),\r\n      selectedItem: ['', Validators.required],\r\n      //customWeight: ['', [Validators.required, this.customWeightValidator]]\r\n    });\r\n\r\n    this.packingForm.get('weightLimit')?.valueChanges.subscribe(() => {\r\n      this.filterItemsByWeight();\r\n    });\r\n  }\r\n\r\n  get items(): FormArray {\r\n    return this.packingForm.get('items') as FormArray;\r\n  }\r\n\r\n  //customWeightValidator(control: AbstractControl): ValidationErrors | null {\r\n  //  const value = control.value;\r\n  //  if (value && (value > 100 || isNaN(value))) {\r\n  //    return { maxWeight: true };\r\n  //  }\r\n  //  return null;\r\n  //}\r\n\r\n  addItem(item?: any): void {\r\n    const itemGroup = this.fb.group({\r\n      index: [item ? item.index : '', Validators.required],\r\n      weight: [item ? item.weight : '', Validators.required],\r\n      cost: [item ? item.cost : '', Validators.required]\r\n    });\r\n\r\n    this.items.push(itemGroup);\r\n  }\r\n\r\n  removeItem(index: number): void {\r\n    this.items.removeAt(index);\r\n  }\r\n\r\n  submitForm(): void {\r\n    if (this.packingForm.valid) {\r\n      const formValue = this.packingForm.value;\r\n      console.log(formValue);\r\n    }\r\n  }\r\n\r\n  loadSampleWeights(): void {\r\n    const filePath = 'assets/input.txt';\r\n    this.http.get(filePath, { responseType: 'text' }).subscribe(\r\n      (response) => {\r\n        const weights = this.extractWeights(response);\r\n        this.sampleWeights = weights; // Assign the sample weights from the API response\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  extractWeights(data: string): number[] {\r\n    const lines = data.split('\\n');\r\n    const weights: number[] = [];\r\n    for (const line of lines) {\r\n      const parts = line.split(':');\r\n      if (parts.length === 2) {\r\n        const weight = parseFloat(parts[0].trim());\r\n        if (!isNaN(weight)) {\r\n          weights.push(weight);\r\n        }\r\n      }\r\n    }\r\n    return weights;\r\n  }\r\n\r\n  loadAllItems(weight: number): any[] {\r\n    const itemsForParcel: any[] = [];\r\n    let remainingWeight = weight;\r\n\r\n    // Iterate over available items\r\n    for (const item of this.availableItems) {\r\n      if (item.weight <= remainingWeight) {\r\n        itemsForParcel.push(item);\r\n        remainingWeight -= item.weight;\r\n      }\r\n    }\r\n\r\n    return itemsForParcel;\r\n  }\r\n\r\n  extractItems(data: string): any[] {\r\n    const lines = data.split('\\n');\r\n    const items: any[] = [];\r\n\r\n    for (const line of lines) {\r\n      const colonIndex = line.indexOf(':');\r\n      if (colonIndex !== -1) {\r\n        const weight = parseFloat(line.substring(0, colonIndex).trim());\r\n        const itemData = line.substring(colonIndex + 1).split('(');\r\n\r\n        for (const item of itemData) {\r\n          const itemInfo = item.replace(/[\\)\\s]/g, '').split(',');\r\n          if (itemInfo.length === 3) {\r\n            const id = parseInt(itemInfo[0]);\r\n            const itemWeight = parseFloat(itemInfo[1]);\r\n            const cost = parseFloat(itemInfo[2].substring(1));\r\n\r\n            items.push({\r\n              id,\r\n              weight: itemWeight,\r\n              cost\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n\r\n  filterItemsByWeight(): void {\r\n    const selectedWeight = parseFloat(this.packingForm.get('weightLimit')?.value);\r\n\r\n    // Clear existing items\r\n    while (this.items.length !== 0) {\r\n      this.items.removeAt(0);\r\n    }\r\n\r\n    // Filter items based on selected weight\r\n    this.availableItems = this.allItems.filter(item => item.weight <= selectedWeight);\r\n\r\n    // Log available items for each sample parcel\r\n    this.sampleWeights.forEach((weight, index) => {\r\n      const itemsForParcel = this.loadAllItems(weight);\r\n      console.log(`Available items for sample parcel ${index + 1}:`, itemsForParcel);\r\n    });\r\n  }\r\n\r\n  onItemSelection(event: any): void {\r\n    const selectedIndex = event.target.value;\r\n    const selectedItem = this.availableItems.find(item => item.index === parseInt(selectedIndex));\r\n    const selectedWeight = parseFloat(this.packingForm.get('weightLimit')?.value);\r\n\r\n    if (selectedItem && selectedItem.weight <= selectedWeight) {\r\n      const itemGroup = this.fb.group({\r\n        index: [selectedItem.index, Validators.required],\r\n        weight: [selectedItem.weight, Validators.required],\r\n        cost: [selectedItem.cost, Validators.required]\r\n      });\r\n\r\n      this.items.push(itemGroup);\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n        <div class=\"col-12\">\r\n            <div class=\"d-flex justify-content-center mt-5\">\r\n                <img src=\"../../assets/logo.png\" alt=\"App Logo\" class=\"app-logo\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-12\">\r\n            <form class=\"p-5 packingForm\" [formGroup]=\"packingForm\" (ngSubmit)=\"submitForm()\">\r\n                <h2 class=\"text-light mb-4\">Enter Parcel Details</h2>\r\n\r\n                <div class=\"form-group\">\r\n                    <label for=\"weight\" class=\"text-light my-2\">Weight</label>\r\n                    <select class=\"form-control\" id=\"weight\" formControlName=\"weightLimit\" (change)=\"filterItemsByWeight()\">\r\n                        <option *ngFor=\"let weight of sampleWeights\" [value]=\"weight\">{{ weight }}</option>\r\n                        <option value=\"custom\">Enter Custom Weight</option>\r\n                    </select>\r\n            <!--        <div *ngIf=\"packingForm.get('weightLimit')?.value === 'custom'\">\r\n                        <input type=\"number\" class=\"form-control mt-2\" formControlName=\"customWeight\" min=\"1\" max=\"100\" placeholder=\"Enter a custom weight between 1 and 100\">\r\n                    </div>-->\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label for=\"items\" class=\"text-light mt-2\">Items:</label>\r\n                    <div formArrayName=\"items\">\r\n                        <div *ngFor=\"let item of items.controls; let i = index\" [formGroupName]=\"i\" class=\"item-group\">\r\n                            <div class=\"form-row\">\r\n                                <div class=\"col\">\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"selectedItem\">Select Item:</label>\r\n                                        <select class=\"form-control\" id=\"index\" formControlName=\"index\" (change)=\"onItemSelection($event)\">\r\n                                            <option value=\"\">-- Select Item --</option>\r\n                                            <option *ngFor=\"let item of availableItems\" [value]=\"item.index\">{{ item.name }}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col\">\r\n                                    <label class=\"text-light\">Weight</label>\r\n                                    <input type=\"number\" formControlName=\"weight\" class=\"form-control\" placeholder=\"Weight\">\r\n                                </div>\r\n                                <div class=\"col\">\r\n                                    <label class=\"text-light\">Cost</label>\r\n                                    <div class=\"input-group\">\r\n                                        <div class=\"input-group-prepend\">\r\n                                            <span class=\"input-group-text\">€</span>\r\n                                        </div>\r\n                                        <input type=\"number\" formControlName=\"cost\" class=\"form-control\" placeholder=\"Cost\">\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <button type=\"button\" (click)=\"removeItem(i)\" class=\"btn btn-yellow\">Remove</button>\r\n                        </div>\r\n                    </div>\r\n                    <button type=\"button\" (click)=\"addItem()\" class=\"btn btn-yellow py-2 my-2\">Add Item</button>\r\n                </div>\r\n\r\n                <button type=\"submit\" [disabled]=\"!packingForm.valid\" class=\"btn btn-yellow\">Submit</button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}