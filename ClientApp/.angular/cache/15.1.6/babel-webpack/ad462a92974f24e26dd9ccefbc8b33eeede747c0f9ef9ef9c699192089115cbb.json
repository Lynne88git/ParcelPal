{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FetchParcelDataComponent {\n  constructor(http) {\n    this.http = http;\n    this.parcels = [];\n    this.availableItems = []; // Items fetched from the API\n    this.sampleParcelWeights = []; // Sample parcel weights fetched from the API\n    this.parsedItems = [];\n    this.parsedParcelWeights = [];\n    this.fileUrl = 'https://gist.githubusercontent.com/Lynne88git/552c061f4ebe867b70f6bc2376653b02/raw/876ca05861ce3bed421e0970b24563dfdfeb7ca5/input.txt';\n  }\n  ngOnInit() {\n    this.fetchParcels();\n  }\n  fetchParcels() {\n    this.http.get(this.fileUrl, {\n      responseType: 'text'\n    }).subscribe(data => {\n      this.parseParcels(data);\n    }, error => {\n      console.error(error);\n    });\n  }\n  parseParcels(data) {\n    const lines = data.split('\\n');\n    const parsedItems = [];\n    const parsedParcelWeights = [];\n    for (const line of lines) {\n      const [idStr, itemsStr] = line.split(':');\n      const id = parseInt(idStr.trim());\n      const items = itemsStr.trim().split('(').slice(1).filter(item => item.trim() !== '').map(item => {\n        const [index, name, weightStr, costStr] = item.replace(')', '').split(',').map(value => value.trim());\n        const weight = parseFloat(weightStr);\n        const cost = parseFloat(costStr.replace('€', ''));\n        return {\n          index: index,\n          name: name,\n          weight: weight,\n          cost: cost\n        };\n      });\n      parsedItems.push(...items);\n      parsedParcelWeights.push(id);\n      console.log(`Items for Parcel ID ${id}:`);\n      for (const item of items) {\n        console.log(`Index: ${item.index}`);\n        console.log(`Name: ${item.name}`);\n        console.log(`Weight: ${item.weight}`);\n        console.log(`Cost: ${item.cost}`);\n        console.log('   ');\n      }\n    }\n    this.parsedItems = parsedItems;\n    this.parsedParcelWeights = parsedParcelWeights;\n  }\n}\nFetchParcelDataComponent.ɵfac = function FetchParcelDataComponent_Factory(t) {\n  return new (t || FetchParcelDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nFetchParcelDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchParcelDataComponent,\n  selectors: [[\"app-fetch-parcel-data\"]],\n  decls: 0,\n  vars: 0,\n  template: function FetchParcelDataComponent_Template(rf, ctx) {},\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;AAUA,OAAM,MAAOA,wBAAwB;EASnCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IARjB,YAAO,GAAa,EAAE;IACtB,mBAAc,GAAW,EAAE,CAAC,CAAC;IAC7B,wBAAmB,GAAa,EAAE,CAAC,CAAC;IACpC,gBAAW,GAAW,EAAE;IACxB,wBAAmB,GAAa,EAAE;IAEjC,YAAO,GAAG,uIAAuI;EAEjH;EAExCC,QAAQ;IACN,IAAI,CAACC,YAAY,EAAE;EACrB;EAEQA,YAAY;IAClB,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,IAAI,CAACC,OAAO,EAAE;MAAEC,YAAY,EAAE;IAAM,CAAE,CAAC,CAACC,SAAS,CAC5DC,IAAY,IAAI;MACf,IAAI,CAACC,YAAY,CAACD,IAAI,CAAC;IACzB,CAAC,EACAE,KAAU,IAAI;MACbC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CACF;EACH;EAEQD,YAAY,CAACD,IAAY;IAC/B,MAAMI,KAAK,GAAGJ,IAAI,CAACK,KAAK,CAAC,IAAI,CAAC;IAC9B,MAAMC,WAAW,GAAW,EAAE;IAC9B,MAAMC,mBAAmB,GAAa,EAAE;IAExC,KAAK,MAAMC,IAAI,IAAIJ,KAAK,EAAE;MACxB,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGF,IAAI,CAACH,KAAK,CAAC,GAAG,CAAC;MACzC,MAAMM,EAAE,GAAGC,QAAQ,CAACH,KAAK,CAACI,IAAI,EAAE,CAAC;MACjC,MAAMC,KAAK,GAAGJ,QAAQ,CACnBG,IAAI,EAAE,CACNR,KAAK,CAAC,GAAG,CAAC,CACVU,KAAK,CAAC,CAAC,CAAC,CACRC,MAAM,CAAEC,IAAY,IAAKA,IAAI,CAACJ,IAAI,EAAE,KAAK,EAAE,CAAC,CAC5CK,GAAG,CAAED,IAAY,IAAI;QACpB,MAAM,CAACE,KAAK,EAAEC,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAC,GAAGL,IAAI,CAC3CM,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAChBlB,KAAK,CAAC,GAAG,CAAC,CACVa,GAAG,CAAEM,KAAa,IAAKA,KAAK,CAACX,IAAI,EAAE,CAAC;QACvC,MAAMY,MAAM,GAAGC,UAAU,CAACL,SAAS,CAAC;QACpC,MAAMM,IAAI,GAAGD,UAAU,CAACJ,OAAO,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACjD,OAAO;UACLJ,KAAK,EAAEA,KAAK;UACZC,IAAI,EAAEA,IAAI;UACVK,MAAM,EAAEA,MAAM;UACdE,IAAI,EAAEA;SACC;MACX,CAAC,CAAC;MAEJrB,WAAW,CAACsB,IAAI,CAAC,GAAGd,KAAK,CAAC;MAC1BP,mBAAmB,CAACqB,IAAI,CAACjB,EAAE,CAAC;MAE5BR,OAAO,CAAC0B,GAAG,CAAC,uBAAuBlB,EAAE,GAAG,CAAC;MACzC,KAAK,MAAMM,IAAI,IAAIH,KAAK,EAAE;QACxBX,OAAO,CAAC0B,GAAG,CAAC,UAAUZ,IAAI,CAACE,KAAK,EAAE,CAAC;QACnChB,OAAO,CAAC0B,GAAG,CAAC,SAASZ,IAAI,CAACG,IAAI,EAAE,CAAC;QACjCjB,OAAO,CAAC0B,GAAG,CAAC,WAAWZ,IAAI,CAACQ,MAAM,EAAE,CAAC;QACrCtB,OAAO,CAAC0B,GAAG,CAAC,SAASZ,IAAI,CAACU,IAAI,EAAE,CAAC;QACjCxB,OAAO,CAAC0B,GAAG,CAAC,KAAK,CAAC;;;IAItB,IAAI,CAACvB,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;EAChD;;AArEWhB,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;QAAxBA,wBAAwB;EAAAuC;EAAAC;EAAAC;EAAAC;EAAAC;AAAA","names":["FetchParcelDataComponent","constructor","http","ngOnInit","fetchParcels","get","fileUrl","responseType","subscribe","data","parseParcels","error","console","lines","split","parsedItems","parsedParcelWeights","line","idStr","itemsStr","id","parseInt","trim","items","slice","filter","item","map","index","name","weightStr","costStr","replace","value","weight","parseFloat","cost","push","log","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["C:\\localdev\\ParcelPal\\ParcelPal\\ClientApp\\src\\app\\fetch-parcel-data\\fetch-parcel-data.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Parcel } from '../interfaces/parcel.interface';\r\nimport { Item } from '../interfaces/item.interface'\r\n\r\n@Component({\r\n  selector: 'app-fetch-parcel-data',\r\n  templateUrl: './fetch-parcel-data.component.html',\r\n  styleUrls: ['./fetch-parcel-data.component.css']\r\n})\r\nexport class FetchParcelDataComponent implements OnInit {\r\n  public parcels: Parcel[] = [];\r\n  public availableItems: Item[] = []; // Items fetched from the API\r\n  public sampleParcelWeights: number[] = []; // Sample parcel weights fetched from the API\r\n  public parsedItems: Item[] = [];\r\n  public parsedParcelWeights: number[] = [];\r\n\r\n  private fileUrl = 'https://gist.githubusercontent.com/Lynne88git/552c061f4ebe867b70f6bc2376653b02/raw/876ca05861ce3bed421e0970b24563dfdfeb7ca5/input.txt';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n    this.fetchParcels();\r\n  }\r\n\r\n  private fetchParcels(): void {\r\n    this.http.get(this.fileUrl, { responseType: 'text' }).subscribe(\r\n      (data: string) => {\r\n        this.parseParcels(data);\r\n      },\r\n      (error: any) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  private parseParcels(data: string): void {\r\n    const lines = data.split('\\n');\r\n    const parsedItems: Item[] = [];\r\n    const parsedParcelWeights: number[] = [];\r\n\r\n    for (const line of lines) {\r\n      const [idStr, itemsStr] = line.split(':');\r\n      const id = parseInt(idStr.trim());\r\n      const items = itemsStr\r\n        .trim()\r\n        .split('(')\r\n        .slice(1)\r\n        .filter((item: string) => item.trim() !== '')\r\n        .map((item: string) => {\r\n          const [index, name, weightStr, costStr] = item\r\n            .replace(')', '')\r\n            .split(',')\r\n            .map((value: string) => value.trim());\r\n          const weight = parseFloat(weightStr);\r\n          const cost = parseFloat(costStr.replace('€', ''));\r\n          return {\r\n            index: index,\r\n            name: name,\r\n            weight: weight,\r\n            cost: cost\r\n          } as Item;\r\n        });\r\n\r\n      parsedItems.push(...items);\r\n      parsedParcelWeights.push(id);\r\n\r\n      console.log(`Items for Parcel ID ${id}:`);\r\n      for (const item of items) {\r\n        console.log(`Index: ${item.index}`);\r\n        console.log(`Name: ${item.name}`);\r\n        console.log(`Weight: ${item.weight}`);\r\n        console.log(`Cost: ${item.cost}`);\r\n        console.log('   ');\r\n      }\r\n    }\r\n\r\n    this.parsedItems = parsedItems;\r\n    this.parsedParcelWeights = parsedParcelWeights;\r\n  }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}